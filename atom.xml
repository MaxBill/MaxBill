<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MaxBill</title>
  
  <subtitle>MaxBill个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.maxbill.cn/"/>
  <updated>2020-02-15T08:28:40.035Z</updated>
  <id>https://www.maxbill.cn/</id>
  
  <author>
    <name>MaxBill</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Hexo写第一篇文章</title>
    <link href="https://www.maxbill.cn/3439513514.html"/>
    <id>https://www.maxbill.cn/3439513514.html</id>
    <published>2020-01-20T02:07:20.000Z</published>
    <updated>2020-02-15T08:28:40.035Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>欢迎来到<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>这是你的第一篇文章， 查看文档<a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo文档</a> 以获取更多信息。 如果你在使用Hexo时遇到任何问题，你可以在<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">故障排除文档</a>中找到答案，或者也可以在<a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>上咨询。</p><h3 id="建一篇新文章"><a href="#建一篇新文章" class="headerlink" title="建一篇新文章"></a>建一篇新文章</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"使用Hexo写第一篇文章"</span></span><br></pre></td></tr></table></figure></div><p>更多信息: 请参考Hexo官网 <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing写作文档</a></p><h3 id="启动Hexo服务"><a href="#启动Hexo服务" class="headerlink" title="启动Hexo服务"></a>启动Hexo服务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server (hexo s)</span><br></pre></td></tr></table></figure></div><p>更多信息: 请参考Hexo官网 <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server服务文档</a></p><h3 id="生成静态资源"><a href="#生成静态资源" class="headerlink" title="生成静态资源"></a>生成静态资源</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate (hexo g)</span><br></pre></td></tr></table></figure></div><p>更多信息: 请参考Hexo官网 <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating静态化文档</a></p><h3 id="远程部署站点"><a href="#远程部署站点" class="headerlink" title="远程部署站点"></a>远程部署站点</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy (hexo d)</span><br></pre></td></tr></table></figure></div><p>更多信息: 请参考Hexo官网 <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment部署文档</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      使用Hexo写第一篇文章
    
    </summary>
    
    
      <category term="建站过程" scheme="https://www.maxbill.cn/kinds/%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/"/>
    
    
      <category term="Hexo" scheme="https://www.maxbill.cn/marks/Hexo/"/>
    
      <category term="Hexo博客" scheme="https://www.maxbill.cn/marks/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件系统FastDFS安装部署(高可用)</title>
    <link href="https://www.maxbill.cn/4293262294.html"/>
    <id>https://www.maxbill.cn/4293262294.html</id>
    <published>2019-11-20T05:34:30.000Z</published>
    <updated>2020-02-15T08:40:08.392Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>本文会搭建一个适合低业务访问业务量的高可用的FastDFS集群环境：两个Tracker服务，一个storage group中两个storage服务节点；该方案仅适用于业务访问量较低的环境下。对于大量业务系统的高并发访问，为了保证存储系统正常工作一般的架构思路：安装多个Tracker服务(至少两个，根据业务量调整)，搭建多个storage group(至少两个，根据业务量调整)，每个storage group中多个storage node(至少两个，做数据的冗余备份，进行容灾机制，而且node必须在不同的机器上)</p><h2 id="FastDFS简介"><a href="#FastDFS简介" class="headerlink" title="FastDFS简介"></a><strong>FastDFS简介</strong></h2><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key value）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。(简介摘自百度百科)</p><h2 id="FastDFS原理介绍"><a href="#FastDFS原理介绍" class="headerlink" title="FastDFS原理介绍"></a><strong>FastDFS原理介绍</strong></h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>FastDFS以客户端库的方式提供基本的文件访问接口如upload、download、append、delete等，Storage 服务会定时的向Tracker服务发送自己的存储信息。当Tracker 服务集群中的Tracker 服务是多个时，各个Tracker服务之间的关系是对等的，因此客户端上传时会任意选择一个Trackre服务。当Tracker服务收到客户端上传文件请求时，会为该文件分配一个可以存储文件的group，当选定了group后就要决定给客户端分配group中的哪一个storage服务。当分配好storage 服务后，客户端向storage发送写文件请求，storage将会为文件分配一个数据存储目录。然后为文件分配一个文件ID标示，然后根据以上的信息生成文件名存储文件。</p><h3 id="文件同步"><a href="#文件同步" class="headerlink" title="文件同步"></a>文件同步</h3><p>上传文件后，客户端将文件写到group内的一个storage 服务即为上传文件成功，storage服务写完文件后，会由后台线程将文件同步至同group内的其他的storage 服务节点上。 每个storage服务写文件后，会同时写一份binlog，binlog里不包含文件数据，只包含文件名等元信息，这份binlog用于后台同步，storage会记录向group内其他storage同步的进度，以便重启后能接上次的进度继续同步；进度以时间戳的方式进行记录，所以最好能保证集群内的所有server的始终保持同步。最后Storage服务的同步进度会作为元数据的一部分汇报到tracker服务上，tracker服务在选择读storage的时候会以同步进度作为参考指标。</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>当下载文件时，客户端先询问tracker服务下载文件的storage，参数为文件标识（卷名和文件名）；然后tracker向客户端返回一台可用的storage；最后客户端直接和storage通讯完成文件下载。</p><h2 id="部署环境准备"><a href="#部署环境准备" class="headerlink" title="部署环境准备"></a><strong>部署环境准备</strong></h2><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>操作系统CentOS7.6<br>fastdfs版本：6.01<br>nginx版本：1.16.1<br>keepalived版本：2.0.19</p><h3 id="系统依赖"><a href="#系统依赖" class="headerlink" title="系统依赖"></a>系统依赖</h3><p>gcc gcc-c++ perl pcre pcre-devel zlib zlib-devel openssl openssl-devel libnl libnl-devel</p><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p>libevent下载地址：<a href="http://libevent.org/" target="_blank" rel="noopener">http://libevent.org/</a><br>nginx下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a><br>keepalived下载地址：<a href="https://www.keepalived.org/software/" target="_blank" rel="noopener">https://www.keepalived.org/software/</a><br>fastdfs下载地址：<a href="https://github.com/happyfish100/fastdfs/releases" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs/releases</a><br>libfasttcommon下载地址：<a href="https://github.com/happyfish100/libfastcommon/releases" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon/releases</a><br>fastdfs-nginx-module下载地址：<a href="https://github.com/happyfish100/fastdfs-nginx-module/releases" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs-nginx-module/releases</a></p><h3 id="机器及网络环境规划"><a href="#机器及网络环境规划" class="headerlink" title="机器及网络环境规划"></a>机器及网络环境规划</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Fdfs Server VIP：         192.168.100.110</span><br><span class="line"></span><br><span class="line">Tracker Server1：         192.168.100.111</span><br><span class="line"></span><br><span class="line">Tracker Server2：         192.168.100.112</span><br><span class="line"></span><br><span class="line">Storage Group1 Node1：    192.168.100.111</span><br><span class="line"></span><br><span class="line">Storage Group1 Node2：    192.168.100.112</span><br></pre></td></tr></table></figure></div><h3 id="防火墙设置"><a href="#防火墙设置" class="headerlink" title="防火墙设置"></a>防火墙设置</h3><p>关闭系统防火墙：sudo systemctl stop firewalld &amp;&amp; systemctl disable firewalld</p><h2 id="Keepalived服务安装配置"><a href="#Keepalived服务安装配置" class="headerlink" title="Keepalived服务安装配置"></a><strong>Keepalived服务安装配置</strong></h2><h3 id="下载Keepalived源码包"><a href="#下载Keepalived源码包" class="headerlink" title="下载Keepalived源码包"></a>下载Keepalived源码包</h3><p>官网地址：<a href="https://www.keepalived.org/" target="_blank" rel="noopener">https://www.keepalived.org/</a><br>下载地址：<a href="https://www.keepalived.org/software/keepalived-2.0.19.tar.gz" target="_blank" rel="noopener">https://www.keepalived.org/software/keepalived-2.0.19.tar.gz</a></p><h3 id="上传并解压Keepalived源码包"><a href="#上传并解压Keepalived源码包" class="headerlink" title="上传并解压Keepalived源码包"></a>上传并解压Keepalived源码包</h3><p>tar -zxvf keepalived-2.0.19.tar.gz</p><h3 id="编译Keepalived准备"><a href="#编译Keepalived准备" class="headerlink" title="编译Keepalived准备"></a>编译Keepalived准备</h3><p>进入解压目录：cd keepalived-2.0.19<br>执行编译准备：./configure –prefix=/work/keepalived<br>注意：一定要有gcc和openssl编译相关的依赖</p><h3 id="编译安装Keepalived"><a href="#编译安装Keepalived" class="headerlink" title="编译安装Keepalived"></a>编译安装Keepalived</h3><p>make &amp;&amp; make install</p><h3 id="安装配置Keepalived"><a href="#安装配置Keepalived" class="headerlink" title="安装配置Keepalived"></a>安装配置Keepalived</h3><p>keepalived启动时会从/etc/keepalived/中相关的目录下查找keepalived.conf配置文件，因此将keepalived安装录/usr/local/keepalived/etc/keepalived.conf 拷贝到/etc/keepalived/中。<br>mkdir /etc/keepalived/<br>cp /work/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf<br>cp /work/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived</p><h3 id="设置Keepalived开机启动项"><a href="#设置Keepalived开机启动项" class="headerlink" title="设置Keepalived开机启动项"></a>设置Keepalived开机启动项</h3><p>systemctl enable keepalived<br>然后就能使用systemctl start/stop/status keepalived管理keepalived了</p><h3 id="配置Keepalived服务"><a href="#配置Keepalived服务" class="headerlink" title="配置Keepalived服务"></a>配置Keepalived服务</h3><p>192.168.100.111机器上配置：vi /etc/keepalived/keepalived.conf</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">       interval 3</span><br><span class="line">       script &quot;&#x2F;work&#x2F;script&#x2F;check_nginx.sh&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance fdfs_server &#123;</span><br><span class="line">       state MASTER</span><br><span class="line">       interface enp0s3</span><br><span class="line">       virtual_router_id 110</span><br><span class="line">       priority 100</span><br><span class="line">       advert_int 3</span><br><span class="line">       authentication &#123;</span><br><span class="line">            auth_type PASS</span><br><span class="line">            auth_pass password</span><br><span class="line">       &#125;</span><br><span class="line">       virtual_ipaddress &#123;</span><br><span class="line">            192.168.100.110</span><br><span class="line">       &#125;</span><br><span class="line">       track_script &#123;</span><br><span class="line">            check_nginx</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>192.168.100.112机器上配置：vi /etc/keepalived/keepalived.conf</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">       interval 3</span><br><span class="line">       script &quot;&#x2F;work&#x2F;script&#x2F;check_nginx.sh&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance fdfs_server &#123;</span><br><span class="line">       state BACKUP</span><br><span class="line">       interface enp0s3</span><br><span class="line">       virtual_router_id 110</span><br><span class="line">       priority 90</span><br><span class="line">       advert_int 3</span><br><span class="line">       authentication &#123;</span><br><span class="line">            auth_type PASS</span><br><span class="line">            auth_pass password</span><br><span class="line">       &#125;</span><br><span class="line">       virtual_ipaddress &#123;</span><br><span class="line">            192.168.100.110</span><br><span class="line">       &#125;</span><br><span class="line">       track_script &#123;</span><br><span class="line">            check_nginx</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="编写nginx服务检测脚本"><a href="#编写nginx服务检测脚本" class="headerlink" title="编写nginx服务检测脚本"></a>编写nginx服务检测脚本</h3><p>vi /work/script/check_nginx.sh</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">active_status&#x3D;&#96;netstat -lntp|grep nginx|wc -l&#96;</span><br><span class="line">if [ $active_status -gt 0 ]; then</span><br><span class="line">    exit 0</span><br><span class="line">else</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div><p>然后给脚本赋予执行权限：chmod +x /work/script/check_nginx.sh</p><h3 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h3><p>vi /etc/sysctl.conf<br>增加如下内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_nonlocal_bind &#x3D; 1  #允许忽视VIP的存在</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1  #允许转发</span><br></pre></td></tr></table></figure></div><p>sysctl –system 使配置生效</p><h2 id="安装FastDFS依赖库"><a href="#安装FastDFS依赖库" class="headerlink" title="安装FastDFS依赖库"></a><strong>安装FastDFS依赖库</strong></h2><h3 id="安装libevent依赖"><a href="#安装libevent依赖" class="headerlink" title="安装libevent依赖"></a>安装libevent依赖</h3><p>解压libevent源码包：tar -zxvf libevent-2.1.11-stable.tar.gz<br>进入源码目录：cd libevent-2.1.11-stable<br>编译安装前配置：./configure<br>编译安装：make &amp;&amp; make install<br>默认安装位置：/usr/local/lib</p><h3 id="安装libfasttcommon依赖"><a href="#安装libfasttcommon依赖" class="headerlink" title="安装libfasttcommon依赖"></a>安装libfasttcommon依赖</h3><p>解压libfasttcommon源码包：tar -zxvf libfastcommon-1.0.41.tar.gz<br>进入源码目录：cd libfastcommon-1.0.41<br>编译安装：./make.sh &amp;&amp; ./make.sh install<br>默认安装位置：/usr/lib64</p><h2 id="安装部署Tracker服务和Storage服务"><a href="#安装部署Tracker服务和Storage服务" class="headerlink" title="安装部署Tracker服务和Storage服务"></a><strong>安装部署Tracker服务和Storage服务</strong></h2><h3 id="安装fastdfs服务"><a href="#安装fastdfs服务" class="headerlink" title="安装fastdfs服务"></a>安装fastdfs服务</h3><p>解压fastdfs源码包：tar -zxvf fastdfs-6.01.tar.gz<br>进入fastdfs源码包：cd fastdfs-6.01<br>编译安装：./make.sh &amp;&amp; ./make.sh install</p><h3 id="fastdfs服务目录信息"><a href="#fastdfs服务目录信息" class="headerlink" title="fastdfs服务目录信息"></a>fastdfs服务目录信息</h3><p>安装完成后服务及脚本拷贝到/usr/bin 目录，配置文件拷贝到/etc/fdfs目录，启动脚本拷贝到/etc/init.d/目录</p><h3 id="注册开机启动"><a href="#注册开机启动" class="headerlink" title="注册开机启动"></a>注册开机启动</h3><p>chkconfig –add fdfs_trackerd<br>chkconfig fdfs_trackerd on<br>chkconfig –add fdfs_storaged<br>chkconfig fdfs_storaged on</p><h3 id="数据目录规划"><a href="#数据目录规划" class="headerlink" title="数据目录规划"></a>数据目录规划</h3><p>创建fdfs数据主目录：mkdir /work/fdfs<br>创建tracker数据目录：mkdir /work/fdfs/tracker<br>创建storage数据目录：mkdir /work/fdfs/storage</p><h3 id="配置tracker服务"><a href="#配置tracker服务" class="headerlink" title="配置tracker服务"></a>配置tracker服务</h3><p>将/etc/fdfs目录下的tracker.conf.sample改为tracker.conf：mv tracker.conf.sample tracker.conf修改内容如下：<br>将base_path=/home/yuqing/fastdfs 改为：/work/fdfs/tracker(该目录为上面定义创建)<br>启动Tracker服务：systemctl start fdfs_trackerd</p><h3 id="配置storage服务"><a href="#配置storage服务" class="headerlink" title="配置storage服务"></a>配置storage服务</h3><p>将/etc/fdfs目录下的storage.conf.sample改为storage.conf：mv storage.conf.sample storage.conf修改内容如下：<br>base_path=/home/yuqing/fastdfs 改为：base_path=/work/fdfs/storage(该目录为上面定义创建)<br>store_path0=/home/yuqing/fastdfs 改为：store_path0=/work/fdfs/storage(该目录为上面定义创建)<br>tracker_server=192.168.209.121:22122 改为：tracker_server=192.168.100.111:22122和tracker_server=192.168.100.112:22122<br>将/etc/fdfs/torage_ids.conf.sample 为storage_ids.conf，内容修改为当前group的storage节点信息：<br>100001 group1 192.168.100.111<br>100002 group1 192.168.100.112<br>启动Storage服务：systemctl start fdfs_storaged</p><h2 id="Nginx服务安装配置"><a href="#Nginx服务安装配置" class="headerlink" title="Nginx服务安装配置"></a><strong>Nginx服务安装配置</strong></h2><h3 id="下载Nginx源码包"><a href="#下载Nginx源码包" class="headerlink" title="下载Nginx源码包"></a>下载Nginx源码包</h3><p>官网地址：<a href="http://nginx.org/" target="_blank" rel="noopener">http://nginx.org/</a><br>下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a></p><h3 id="上传并解压Nginx源码包及fastdfs插件包"><a href="#上传并解压Nginx源码包及fastdfs插件包" class="headerlink" title="上传并解压Nginx源码包及fastdfs插件包"></a>上传并解压Nginx源码包及fastdfs插件包</h3><p>tar -zxvf nginx-1.16.1.tar.gz<br>tar -zxvf fastdfs-nginx-module-1.21.tar.gz</p><h3 id="编译Nginx准备"><a href="#编译Nginx准备" class="headerlink" title="编译Nginx准备"></a>编译Nginx准备</h3><p>进入解压目录：cd nginx-1.16.1<br>拷贝fastdfs插件包到nginx源码目录：mv ../fastdfs-nginx-module-1.21 .<br>执行编译准备：./configure –prefix=/work/nginx \–with-stream \–add-module=fastdfs-nginx-module-1.21/src<br>注意：一定要有gcc和openssl编译相关的依赖</p><h3 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a>编译安装Nginx</h3><p>make &amp;&amp; make install</p><h3 id="注册到系统服务"><a href="#注册到系统服务" class="headerlink" title="注册到系统服务"></a>注册到系统服务</h3><p>vi /usr/lib/systemd/system/nginx.service</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;nginx</span><br><span class="line">Documentation&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;en&#x2F;docs&#x2F;</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">PIDFile&#x3D;&#x2F;work&#x2F;nginx&#x2F;logs&#x2F;nginx.pid</span><br><span class="line">ExecStartPre&#x3D;&#x2F;work&#x2F;nginx&#x2F;sbin&#x2F;nginx -t -c &#x2F;work&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">ExecStart&#x3D;&#x2F;work&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;work&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID</span><br><span class="line">ExecStop&#x3D;&#x2F;bin&#x2F;kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></div><h3 id="设置Nginx开机启动项"><a href="#设置Nginx开机启动项" class="headerlink" title="设置Nginx开机启动项"></a>设置Nginx开机启动项</h3><p>systemctl enable nginx<br>然后就能使用systemctl start/stop/status nginx管理nginx了</p><h3 id="修改Nginx配置"><a href="#修改Nginx配置" class="headerlink" title="修改Nginx配置"></a>修改Nginx配置</h3><p>vi /work/nginx/conf/nginx.conf</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line">#error_log  logs&#x2F;error.log;</span><br><span class="line">#error_log  logs&#x2F;error.log  notice;</span><br><span class="line">#error_log  logs&#x2F;error.log  info;</span><br><span class="line">#pid        logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line">    upstream tracker &#123;</span><br><span class="line">         server 192.168.100.111:22122 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;10s;</span><br><span class="line">         server 192.168.100.112:22122 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;10s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       7777;</span><br><span class="line">        proxy_timeout 5m;</span><br><span class="line">        proxy_pass tracker;</span><br><span class="line">        proxy_connect_timeout 10s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    upstream storage &#123;</span><br><span class="line">         server 192.168.100.111:8888 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;10s;</span><br><span class="line">         server 192.168.100.112:8888 weight&#x3D;1 max_fails&#x3D;2 fail_timeout&#x3D;10s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        </span><br><span class="line">        location &#x2F;group1 &#123;</span><br><span class="line">            proxy_pass         http:&#x2F;&#x2F;storage;</span><br><span class="line">            proxy_set_header   Host             $host;</span><br><span class="line">            proxy_set_header   X-Real-IP        $remote_addr;</span><br><span class="line">            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  &#x2F;50x.html;</span><br><span class="line">        location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8888;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            alias &#x2F;work&#x2F;fdfs&#x2F;storage&#x2F;data&#x2F;;</span><br><span class="line">            ngx_fastdfs_module;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="配置nginx的fdfs插件"><a href="#配置nginx的fdfs插件" class="headerlink" title="配置nginx的fdfs插件"></a>配置nginx的fdfs插件</h3><p>将/etc/fdfs下的http.conf.sample和mime.types.sample重命名为：http.conf和mime.types<br>将fastdfs-nginx-module-1.21/src下的mod_fastdfs.conf拷贝到/etc/fdfs下<br>修改mod_fastdfs.conf如下：<br>连接超时时间： connect_timeout=5<br>Tracker服务地址：tracker_server=192.168.100.111:22122 和tracker_server=192.168.100.112:22122<br>Storage服务端口：storage\server_port=23000<br>如果文件ID的uri中包含/group**，则要设置为true：url_have_group_name = true<br>Storage配置的store_path0路径，必须和storage.conf中的一致：store_path0=/work/fdfs/storage<br>其他详细配置如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"># connect timeout in seconds</span><br><span class="line"># default value is 30s</span><br><span class="line">connect_timeout&#x3D;5</span><br><span class="line"></span><br><span class="line"># network recv and send timeout in seconds</span><br><span class="line"># default value is 30s</span><br><span class="line">network_timeout&#x3D;10</span><br><span class="line"></span><br><span class="line"># the base path to store log files</span><br><span class="line">base_path&#x3D;&#x2F;work&#x2F;fdfs&#x2F;storage</span><br><span class="line"></span><br><span class="line"># if load FastDFS parameters from tracker server</span><br><span class="line"># since V1.12</span><br><span class="line"># default value is false</span><br><span class="line">load_fdfs_parameters_from_tracker&#x3D;true</span><br><span class="line"></span><br><span class="line"># storage sync file max delay seconds</span><br><span class="line"># same as tracker.conf</span><br><span class="line"># valid only when load_fdfs_parameters_from_tracker is false</span><br><span class="line"># since V1.12</span><br><span class="line"># default value is 86400 seconds (one day)</span><br><span class="line">storage_sync_file_max_delay &#x3D; 86400</span><br><span class="line"></span><br><span class="line"># if use storage ID instead of IP address</span><br><span class="line"># same as tracker.conf</span><br><span class="line"># valid only when load_fdfs_parameters_from_tracker is false</span><br><span class="line"># default value is false</span><br><span class="line"># since V1.13</span><br><span class="line">use_storage_id &#x3D; false</span><br><span class="line"></span><br><span class="line"># specify storage ids filename, can use relative or absolute path</span><br><span class="line"># same as tracker.conf</span><br><span class="line"># valid only when load_fdfs_parameters_from_tracker is false</span><br><span class="line"># since V1.13</span><br><span class="line">storage_ids_filename &#x3D; storage_ids.conf</span><br><span class="line"></span><br><span class="line"># FastDFS tracker_server can ocur more than once, and tracker_server format is</span><br><span class="line">#  &quot;host:port&quot;, host can be hostname or ip address</span><br><span class="line"># valid only when load_fdfs_parameters_from_tracker is true</span><br><span class="line">tracker_server&#x3D;192.168.100.111:22122</span><br><span class="line">tracker_server&#x3D;192.168.100.112:22122</span><br><span class="line"></span><br><span class="line"># the port of the local storage server</span><br><span class="line"># the default value is 23000</span><br><span class="line">storage_server_port&#x3D;23000</span><br><span class="line"></span><br><span class="line"># the group name of the local storage server</span><br><span class="line">group_name&#x3D;group1</span><br><span class="line"></span><br><span class="line"># if the url &#x2F; uri including the group name</span><br><span class="line"># set to false when uri like &#x2F;M00&#x2F;00&#x2F;00&#x2F;xxx</span><br><span class="line"># set to true when uri like $&#123;group_name&#125;&#x2F;M00&#x2F;00&#x2F;00&#x2F;xxx, such as group1&#x2F;M00&#x2F;xxx</span><br><span class="line"># default value is false</span><br><span class="line">url_have_group_name &#x3D; true</span><br><span class="line"></span><br><span class="line"># path(disk or mount point) count, default value is 1</span><br><span class="line"># must same as storage.conf</span><br><span class="line">store_path_count&#x3D;1</span><br><span class="line"></span><br><span class="line"># store_path#, based 0, if store_path0 not exists, it&#39;s value is base_path</span><br><span class="line"># the paths must be exist</span><br><span class="line"># must same as storage.conf</span><br><span class="line">store_path0&#x3D;&#x2F;work&#x2F;fdfs&#x2F;storage</span><br><span class="line"></span><br><span class="line"># standard log level as syslog, case insensitive, value list:</span><br><span class="line">### emerg for emergency</span><br><span class="line">### alert</span><br><span class="line">### crit for critical</span><br><span class="line">### error</span><br><span class="line">### warn for warning</span><br><span class="line">### notice</span><br><span class="line">### info</span><br><span class="line">### debug</span><br><span class="line">log_level&#x3D;info</span><br><span class="line"></span><br><span class="line"># set the log filename, such as &#x2F;usr&#x2F;local&#x2F;apache2&#x2F;logs&#x2F;mod_fastdfs.log</span><br><span class="line"># empty for output to stderr (apache and nginx error_log file)</span><br><span class="line">log_filename&#x3D;</span><br><span class="line"></span><br><span class="line"># response mode when the file not exist in the local file system</span><br><span class="line">## proxy: get the content from other storage server, then send to client</span><br><span class="line">## redirect: redirect to the original storage server (HTTP Header is Location)</span><br><span class="line">response_mode&#x3D;proxy</span><br><span class="line"></span><br><span class="line"># the NIC alias prefix, such as eth in Linux, you can see it by ifconfig -a</span><br><span class="line"># multi aliases split by comma. empty value means auto set by OS type</span><br><span class="line"># this paramter used to get all ip address of the local host</span><br><span class="line"># default values is empty</span><br><span class="line">if_alias_prefix&#x3D;</span><br><span class="line"></span><br><span class="line"># use &quot;#include&quot; directive to include HTTP config file</span><br><span class="line"># NOTE: #include is an include directive, do NOT remove the # before include</span><br><span class="line">#include http.conf</span><br><span class="line"></span><br><span class="line"># if support flv</span><br><span class="line"># default value is false</span><br><span class="line"># since v1.15</span><br><span class="line">flv_support &#x3D; true</span><br><span class="line"></span><br><span class="line"># flv file extension name</span><br><span class="line"># default value is flv</span><br><span class="line"># since v1.15</span><br><span class="line">flv_extension &#x3D; flv</span><br><span class="line"></span><br><span class="line"># set the group count</span><br><span class="line"># set to none zero to support multi-group on this storage server</span><br><span class="line"># set to 0  for single group only</span><br><span class="line"># groups settings section as [group1], [group2], ..., [groupN]</span><br><span class="line"># default value is 0</span><br><span class="line"># since v1.14</span><br><span class="line">group_count &#x3D; 1</span><br><span class="line"></span><br><span class="line"># group settings for group #1</span><br><span class="line"># since v1.14</span><br><span class="line"># when support multi-group on this storage server, uncomment following section</span><br><span class="line">[group1]</span><br><span class="line">group_name&#x3D;group1</span><br><span class="line">storage_server_port&#x3D;23000</span><br><span class="line">store_path_count&#x3D;1</span><br><span class="line">store_path0&#x3D;&#x2F;work&#x2F;fdfs&#x2F;storage</span><br><span class="line"></span><br><span class="line"># group settings for group #2</span><br><span class="line"># since v1.14</span><br><span class="line"># when support multi-group, uncomment following section as neccessary</span><br><span class="line">#[group2]</span><br><span class="line">#group_name&#x3D;group2</span><br><span class="line">#storage_server_port&#x3D;23000</span><br><span class="line">#store_path_count&#x3D;1</span><br><span class="line">#store_path0&#x3D;&#x2F;home&#x2F;yuqing&#x2F;fastdfs</span><br></pre></td></tr></table></figure></div><h2 id="服务启动及验证"><a href="#服务启动及验证" class="headerlink" title="服务启动及验证"></a><strong>服务启动及验证</strong></h2><p>分别启动keepalive、nginx、tracker、storage服务<br>查看服务是否正常服务：<br><a href="https://oscimg.oschina.net/oscnet/0e39fd8468a028040406cce85bde48b5586.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/0e39fd8468a028040406cce85bde48b5586.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>在任意Storage机器上查看集群状态：fdfs_monitor /etc/fdfs/storage.conf<br><a href="https://oscimg.oschina.net/oscnet/fda6e27aedde1ebc7a92d3db5af2048e9e9.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/fda6e27aedde1ebc7a92d3db5af2048e9e9.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h2 id="Java客户端测试"><a href="#Java客户端测试" class="headerlink" title="Java客户端测试"></a><strong>Java客户端测试</strong></h2><h3 id="java项目Maven依赖"><a href="#java项目Maven依赖" class="headerlink" title="java项目Maven依赖"></a>java项目Maven依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https:&#x2F;&#x2F;github.com&#x2F;tobato&#x2F;FastDFS_Client</span><br><span class="line">目前客户端主要依赖于SpringBoot，因此必须引入:</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;2.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;relativePath&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">FastDFS 依赖包：</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.tobato&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastdfs-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.26.7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">将FastDFS引入项目：</span><br><span class="line">@Import(FdfsClientConfig.class)</span><br><span class="line"></span><br><span class="line">在application.yml当中配置Fdfs相关参数：</span><br><span class="line">fdfs:</span><br><span class="line">  pool:</span><br><span class="line">    #连接池最大数量</span><br><span class="line">    max-total: 200</span><br><span class="line">    #每个tracker地址的最大连接数</span><br><span class="line">    max-total-per-key: 50</span><br><span class="line">    #连接耗尽时等待获取连接的最大毫秒数</span><br><span class="line">    max-wait-millis: 5000</span><br><span class="line">  so-timeout: 1500</span><br><span class="line">  connect-timeout: 600</span><br><span class="line">  thumb-image:</span><br><span class="line">    width: 150</span><br><span class="line">    height: 150</span><br><span class="line">  tracker-list:</span><br><span class="line">    - 192.168.100.110:7777</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">fdfs:</span><br><span class="line">  pool:</span><br><span class="line">    #连接池最大数量</span><br><span class="line">    max-total: 200</span><br><span class="line">    #每个tracker地址的最大连接数</span><br><span class="line">    max-total-per-key: 50</span><br><span class="line">    #连接耗尽时等待获取连接的最大毫秒数</span><br><span class="line">    max-wait-millis: 5000</span><br><span class="line">  so-timeout: 1500</span><br><span class="line">  connect-timeout: 600</span><br><span class="line">  thumb-image:</span><br><span class="line">    width: 150</span><br><span class="line">    height: 150</span><br><span class="line">  tracker-list:</span><br><span class="line">    - 192.168.100.111:22122</span><br><span class="line">    - 192.168.100.112:22122</span><br><span class="line"></span><br><span class="line">使用接口服务对Fdfs服务端进行操作，主要接口包括：</span><br><span class="line">TrackerClient - TrackerServer接口</span><br><span class="line">GenerateStorageClient - 一般文件存储接口 (StorageServer接口)</span><br><span class="line">FastFileStorageClient - 为方便项目开发集成的简单接口(StorageServer接口)</span><br><span class="line">AppendFileStorageClient - 支持文件续传操作的接口 (StorageServer接口)</span><br></pre></td></tr></table></figure></div><h3 id="代码测试"><a href="#代码测试" class="headerlink" title="代码测试"></a>代码测试</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">package com.maxbill;</span><br><span class="line"></span><br><span class="line">import com.github.tobato.fastdfs.FdfsClientConfig;</span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.MetaData;</span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.StorePath;</span><br><span class="line">import com.github.tobato.fastdfs.domain.proto.storage.DownloadByteArray;</span><br><span class="line">import com.github.tobato.fastdfs.service.FastFileStorageClient;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.apache.commons.lang3.StringUtils;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Import;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.text.DateFormat;</span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">@Log4j2</span><br><span class="line">@Component</span><br><span class="line">@Import(FdfsClientConfig.class)</span><br><span class="line">public class FdfsClientUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static final String BASE_URL &#x3D; &quot;http:&#x2F;&#x2F;192.168.100.110:8888&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    private static FdfsClientUtil fdfsClientUtil;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        fdfsClientUtil &#x3D; this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 文件上传</span><br><span class="line">     *</span><br><span class="line">     * @param file    文件信息</span><br><span class="line">     * @param infoMap 文件扩展信息</span><br><span class="line">     * @return 上传路径</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Map&lt;String, Object&gt; uploadFile(File file, Map&lt;String, String&gt; infoMap) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String fileName &#x3D; file.getName();</span><br><span class="line">            String fileType &#x3D; fileName.substring(fileName.lastIndexOf(&quot;\\&quot;) + 1);</span><br><span class="line">            &#x2F;&#x2F;String fileType &#x3D; FilenameUtils.getExtension(file.getName())</span><br><span class="line">            log.info(&quot;[fdfs-upload]-start upload file ... &quot;);</span><br><span class="line">            log.info(&quot;[fdfs-upload]-request upload file name: &#123;&#125;&quot;, fileName);</span><br><span class="line">            log.info(&quot;[fdfs-upload]-request upload file info: &#123;&#125;&quot;, infoMap);</span><br><span class="line">            StorePath path &#x3D; fdfsClientUtil.storageClient.uploadFile(new FileInputStream(file), file.length(), fileType, getMetaData(infoMap));</span><br><span class="line">            log.info(&quot;[fdfs-upload]-upload success path: &#123;&#125;&quot;, path.getFullPath());</span><br><span class="line">            return getResultMap(BASE_URL.concat(path.getFullPath()), null);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;[fdfs-upload]-upload file exception info: &#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            return getResultMap(null, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 下载文件</span><br><span class="line">     *</span><br><span class="line">     * @param filePath 文件路径标识</span><br><span class="line">     * @return 文件字节</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Map&lt;String, Object&gt; downloadFile(String filePath) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            filePath &#x3D; filePath.replace(BASE_URL, &quot;&quot;);</span><br><span class="line">            StorePath storePath &#x3D; StorePath.parseFromUrl(filePath);</span><br><span class="line">            String group &#x3D; storePath.getGroup();</span><br><span class="line">            String path &#x3D; storePath.getPath();</span><br><span class="line">            log.info(&quot;[fdfs-download]-start download file ... &quot;);</span><br><span class="line">            log.info(&quot;[fdfs-download]-request download file group: &#123;&#125;&quot;, group);</span><br><span class="line">            log.info(&quot;[fdfs-download]-request download file path: &#123;&#125;&quot;, path);</span><br><span class="line">            byte[] data &#x3D; fdfsClientUtil.storageClient.downloadFile(group, path, new DownloadByteArray());</span><br><span class="line">            log.info(&quot;[fdfs-download]-request download file success ... &quot;);</span><br><span class="line">            return getResultMap(data, null);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;[fdfs-download]-download file exception info: &#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            return getResultMap(null, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除文件</span><br><span class="line">     *</span><br><span class="line">     * @param filePath 文件路径标识</span><br><span class="line">     * @return 操作结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static boolean deleteFile(String filePath) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            filePath &#x3D; filePath.replace(BASE_URL, &quot;&quot;);</span><br><span class="line">            StorePath storePath &#x3D; StorePath.parseFromUrl(filePath);</span><br><span class="line">            String group &#x3D; storePath.getGroup();</span><br><span class="line">            String path &#x3D; storePath.getPath();</span><br><span class="line">            log.info(&quot;[fdfs-delete]-start delete file ... &quot;);</span><br><span class="line">            log.info(&quot;[fdfs-delete]-request delete file group: &#123;&#125;&quot;, group);</span><br><span class="line">            log.info(&quot;[fdfs-delete]-request delete file path: &#123;&#125;&quot;, path);</span><br><span class="line">            fdfsClientUtil.storageClient.deleteFile(storePath.getGroup(), storePath.getPath());</span><br><span class="line">            log.info(&quot;[fdfs-delete]-request delete file success ... &quot;);</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;[fdfs-delete]-delete file exception info: &#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 查看文件元信息</span><br><span class="line">     *</span><br><span class="line">     * @param filePath 文件路径标识</span><br><span class="line">     * @return 文件信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static Map&lt;String, Object&gt; getFileInfo(String filePath) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            filePath &#x3D; filePath.replace(BASE_URL, &quot;&quot;);</span><br><span class="line">            StorePath storePath &#x3D; StorePath.parseFromUrl(filePath);</span><br><span class="line">            String group &#x3D; storePath.getGroup();</span><br><span class="line">            String path &#x3D; storePath.getPath();</span><br><span class="line">            log.info(&quot;[fdfs-meta]-start meta file ... &quot;);</span><br><span class="line">            log.info(&quot;[fdfs-meta]-request meta file group: &#123;&#125;&quot;, group);</span><br><span class="line">            log.info(&quot;[fdfs-meta]-request meta file path: &#123;&#125;&quot;, path);</span><br><span class="line">            Map&lt;String, String&gt; infoMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">            infoMap.put(&quot;createPath&quot;, filePath);</span><br><span class="line">            Set&lt;MetaData&gt; metaData &#x3D; fdfsClientUtil.storageClient.getMetadata(storePath.getGroup(), storePath.getPath());</span><br><span class="line">            log.info(&quot;[fdfs-meta]-request meta file success ... &quot;);</span><br><span class="line">            if (null !&#x3D; metaData &amp;&amp; !metaData.isEmpty()) &#123;</span><br><span class="line">                metaData.forEach(meta -&gt; &#123;</span><br><span class="line">                    infoMap.put(meta.getName(), meta.getValue());</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            return getResultMap(infoMap, null);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(&quot;[fdfs-meta]-meta file exception info: &#123;&#125;&quot;, e.getMessage());</span><br><span class="line">            return getResultMap(null, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 封装附件元信息</span><br><span class="line">     *</span><br><span class="line">     * @param infoMap 自定义数据</span><br><span class="line">     * @return 附件元信息</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Set&lt;MetaData&gt; getMetaData(Map&lt;String, String&gt; infoMap) &#123;</span><br><span class="line">        if (null !&#x3D; infoMap &amp;&amp; !infoMap.isEmpty()) &#123;</span><br><span class="line">            Set&lt;MetaData&gt; metaDataSet &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">            for (String key : infoMap.keySet()) &#123;</span><br><span class="line">                metaDataSet.add(new MetaData(key, infoMap.get(key)));</span><br><span class="line">            &#125;</span><br><span class="line">            return metaDataSet;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            DateFormat df &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">            Set&lt;MetaData&gt; metaDataSet &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">            metaDataSet.add(new MetaData(&quot;createUser&quot;, &quot;MaxBill&quot;));</span><br><span class="line">            metaDataSet.add(new MetaData(&quot;createDate&quot;, df.format(new Date())));</span><br><span class="line">            return metaDataSet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 封装结果信息</span><br><span class="line">     *</span><br><span class="line">     * @param data 数据</span><br><span class="line">     * @param info 信息</span><br><span class="line">     * @return 操作结果</span><br><span class="line">     *&#x2F;</span><br><span class="line">    private static Map&lt;String, Object&gt; getResultMap(Object data, String info) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; resultMap &#x3D; new HashMap&lt;&gt;();</span><br><span class="line">        if (StringUtils.isEmpty(info)) &#123;</span><br><span class="line">            resultMap.put(&quot;flag&quot;, true);</span><br><span class="line">            resultMap.put(&quot;data&quot;, data);</span><br><span class="line">            resultMap.put(&quot;info&quot;, &quot;success&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            resultMap.put(&quot;flag&quot;, false);</span><br><span class="line">            resultMap.put(&quot;info&quot;, info);</span><br><span class="line">            resultMap.put(&quot;data&quot;, null);</span><br><span class="line">        &#125;</span><br><span class="line">        return resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      分布式文件系统FastDFS安装部署(高可用)
    
    </summary>
    
    
      <category term="学分布式" scheme="https://www.maxbill.cn/kinds/%E5%AD%A6%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="FastDFS" scheme="https://www.maxbill.cn/marks/FastDFS/"/>
    
      <category term="分布式文件系统" scheme="https://www.maxbill.cn/marks/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="高可用" scheme="https://www.maxbill.cn/marks/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件系统FastDFS安装部署(非高可用)</title>
    <link href="https://www.maxbill.cn/2128340410.html"/>
    <id>https://www.maxbill.cn/2128340410.html</id>
    <published>2019-11-18T10:07:20.000Z</published>
    <updated>2020-02-15T08:40:42.377Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>本文会搭建一个适合低业务访问业务量的非高可用的FastDFS集群环境：一个Tracker服务，一个storage group中两个storage服务节点；该场景不适合生产环境使用，生产环境应该增加Tracker服务数量使用负载均衡器负载或者使用keepalived进行主备，对于storage group应该搭建多个，每组storage group内节点至少在两个及以上。</p><p>在后台管理的web项目中，对于文件存储、上传、下载等操作是必不可少的。对于单节点部署的系统还可将文件存储在本机上进行操作，但是对于分布式部署的系统来说，文件存储操作问题就显现出来了，必须将文件集中存储在某处。目前一般的存储方案有：1.使用云厂商的对象存储服务；2.使用自建的文件服务器(ftp…)；3.文件磁盘挂在方案；4.使用HDFS或FDFS等文件存储解决方案… 如果项目部署在可连接互联网的网络环境中可以使用云厂商的对象存储服务(安全、便利、低成本…)；但是对于很多政企或者金融的项目大部分都是部署在不能连接互联网的网络环境中，那么我们就只能选择在内网搭建文件服务的方式。为了保证文件数据的安全性和完整性，本文使用分布式文件系统服务FastDFS来实践。</p><h2 id="FastDFS简介"><a href="#FastDFS简介" class="headerlink" title="FastDFS简介"></a><strong>FastDFS简介</strong></h2><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。FastDFS服务端有两个角色：跟踪器（tracker）和存储节点（storage）。跟踪器主要做调度工作，在访问上起负载均衡的作用。存储节点存储文件，完成文件管理的所有功能：就是这样的存储、同步和提供存取接口，FastDFS同时对文件的metadata进行管理。所谓文件的meta data就是文件的相关属性，以键值对（key value）方式表示，如：width=1024，其中的key为width，value为1024。文件metadata是文件属性列表，可以包含多个键值对。跟踪器和存储节点都可以由一台或多台服务器构成。跟踪器和存储节点中的服务器均可以随时增加或下线而不会影响线上服务。其中跟踪器中的所有服务器都是对等的，可以根据服务器的压力情况随时增加或减少。为了支持大容量，存储节点（服务器）采用了分卷（或分组）的组织方式。存储系统由一个或多个卷组成，卷与卷之间的文件是相互独立的，所有卷的文件容量累加就是整个存储系统中的文件容量。一个卷可以由一台或多台存储服务器组成，一个卷下的存储服务器中的文件都是相同的，卷中的多台存储服务器起到了冗余备份和负载均衡的作用。在卷中增加服务器时，同步已有的文件由系统自动完成，同步完成后，系统自动将新增服务器切换到线上提供服务。当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。FastDFS中的文件标识分为两个部分：卷名和文件名，二者缺一不可。(简介摘自百度百科)</p><h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a><strong>原理介绍</strong></h2><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>FastDFS以客户端库的方式提供基本的文件访问接口如upload、download、append、delete等，Storage 服务会定时的向Tracker服务发送自己的存储信息。当Tracker 服务集群中的Tracker 服务是多个时，各个Tracker服务之间的关系是对等的，因此客户端上传时会任意选择一个Trackre服务。当Tracker服务收到客户端上传文件请求时，会为该文件分配一个可以存储文件的group，当选定了group后就要决定给客户端分配group中的哪一个storage服务。当分配好storage 服务后，客户端向storage发送写文件请求，storage将会为文件分配一个数据存储目录。然后为文件分配一个文件ID标示，然后根据以上的信息生成文件名存储文件。</p><h3 id="文件同步"><a href="#文件同步" class="headerlink" title="文件同步"></a>文件同步</h3><p>上传文件后，客户端将文件写到group内的一个storage 服务即为上传文件成功，storage服务写完文件后，会由后台线程将文件同步至同group内的其他的storage 服务节点上。 每个storage服务写文件后，会同时写一份binlog，binlog里不包含文件数据，只包含文件名等元信息，这份binlog用于后台同步，storage会记录向group内其他storage同步的进度，以便重启后能接上次的进度继续同步；进度以时间戳的方式进行记录，所以最好能保证集群内的所有server的始终保持同步。最后Storage服务的同步进度会作为元数据的一部分汇报到tracker服务上，tracker服务在选择读storage的时候会以同步进度作为参考指标。</p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p>当下载文件时，客户端先询问tracker服务下载文件的storage，参数为文件标识（卷名和文件名）；然后tracker向客户端返回一台可用的storage；最后客户端直接和storage通讯完成文件下载。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h2><h3 id="软件环境"><a href="#软件环境" class="headerlink" title="软件环境"></a>软件环境</h3><p>libevent下载地址：<a href="http://libevent.org/" target="_blank" rel="noopener">http://libevent.org/</a><br>libfasttcommon下载地址：<a href="https://github.com/happyfish100/libfastcommon/releases" target="_blank" rel="noopener">https://github.com/happyfish100/libfastcommon/releases</a><br>fastdfs下载地址：<a href="https://github.com/happyfish100/fastdfs/releases" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs/releases</a><br>fastdfs-nginx-module下载地址：<a href="https://github.com/happyfish100/fastdfs-nginx-module/releases" target="_blank" rel="noopener">https://github.com/happyfish100/fastdfs-nginx-module/releases</a></p><h3 id="机器及网络环境"><a href="#机器及网络环境" class="headerlink" title="机器及网络环境"></a>机器及网络环境</h3><p>Tracker Server1： 192.168.100.101<br>Storage Group1 Node1： 192.168.100.102<br>Storage Group1 Node2： 192.168.100.103<br>Tracker节点需要安装的组件：libevent、libfasttcommon、fastdfs<br>Storage节点需要安装的组件：libfasttcommon、fastdfs、nginx、fastdfs-nginx-module</p><h2 id="部署Tracker服务"><a href="#部署Tracker服务" class="headerlink" title="部署Tracker服务"></a><strong>部署Tracker服务</strong></h2><p>对应机器：192.168.100.101</p><h3 id="安装libevent依赖"><a href="#安装libevent依赖" class="headerlink" title="安装libevent依赖"></a>安装libevent依赖</h3><p>注：如果机器有外网环境直接yum -y install libevent，本文使用源码包编译安装<br>解压libevent源码包：tar -zxvf libevent-2.1.11-stable.tar.gz<br>编译安装前配置：./configure<br>编译安装：make &amp;&amp; make install<br>默认安装位置：/usr/local/lib</p><h3 id="安装libfasttcommon依赖"><a href="#安装libfasttcommon依赖" class="headerlink" title="安装libfasttcommon依赖"></a>安装libfasttcommon依赖</h3><p>解压libfasttcommon源码包：tar -zxvf libfastcommon-1.0.41.tar.gz<br>编译安装：./make.sh &amp;&amp; ./make.sh install<br>默认安装位置：/usr/lib64</p><h3 id="安装FastDFS-Tracker服务"><a href="#安装FastDFS-Tracker服务" class="headerlink" title="安装FastDFS Tracker服务"></a>安装FastDFS Tracker服务</h3><p>解压fastdfs源码包：tar -zxvf fastdfs-6.01.tar.gz<br>编译安装：./make.sh &amp;&amp; ./make.sh install<br>安装完成后服务及脚本都拷贝到/usr/bin 目录了：<br><a href="https://oscimg.oschina.net/oscnet/39cd95b5f74930e3ec6a61c5f09014cbeb1.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/39cd95b5f74930e3ec6a61c5f09014cbeb1.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>安装完成后配置文件都拷贝到/etc/fdfs目录下了：<br><a href="https://oscimg.oschina.net/oscnet/2c50c35c47593d618dd6839cd509c64eb7f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/2c50c35c47593d618dd6839cd509c64eb7f.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>拷贝/etc/fdfs目录下的Tracker配置文件示例：cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf<br>修改 /etc/fdfs/tracker.conf中配置项：<br>base_path=/home/yuqing/fastdfs 改为：/work/fastdfs/tracker(该目录为自己定义，启动时会用，没有会报错)<br>安装完成后启动脚本都拷贝到/etc/init.d目录下了：<br><a href="https://oscimg.oschina.net/oscnet/41d522edb4ebd80069b4e02d216ee3662e7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/41d522edb4ebd80069b4e02d216ee3662e7.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>将/etc/init.d/fdfs_storaged删掉，因为这台机器只安装Tracker服务<br>注：编译安装fastdfs需要perl库依赖<br>设置Tracker服务开机自启动：<br>chkconfig –add fdfs_trackerd<br>chkconfig fdfs_trackerd on<br><a href="https://oscimg.oschina.net/oscnet/fc1976da6dc24ef90a3bb19cf41f36133a4.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/fc1976da6dc24ef90a3bb19cf41f36133a4.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>启动Tracker服务：systemctl start fdfs_trackerd<br>重启Tracker服务：systemctl restart fdfs_trackerd<br>停止Tracker服务：systemctl stop fdfs_trackerd<br>开放Tracker服务端口：iptables -I INPUT -p tcp –dport 22122 -j ACCEPT<br><a href="https://oscimg.oschina.net/oscnet/79a84e0255a538c1be1b7fcaa528b679f75.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/79a84e0255a538c1be1b7fcaa528b679f75.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h2 id="部署Storage服务"><a href="#部署Storage服务" class="headerlink" title="部署Storage服务"></a><strong>部署Storage服务</strong></h2><p>对应机器：192.168.100.102/103</p><h3 id="安装libfasttcommon依赖-1"><a href="#安装libfasttcommon依赖-1" class="headerlink" title="安装libfasttcommon依赖"></a>安装libfasttcommon依赖</h3><p>解压libfasttcommon源码包：tar -zxvf libfastcommon-1.0.41.tar.gz<br>编译安装：./make.sh &amp;&amp; ./make.sh install<br>默认安装位置：/usr/lib64</p><h3 id="安装FastDFS-Storage服务"><a href="#安装FastDFS-Storage服务" class="headerlink" title="安装FastDFS Storage服务"></a>安装FastDFS Storage服务</h3><p>解压fastdfs源码包：tar -zxvf fastdfs-6.01.tar.gz<br>编译安装：./make.sh &amp;&amp; ./make.sh install<br>安装完成后服务及脚本都拷贝到/usr/bin 目录了：<br><a href="https://oscimg.oschina.net/oscnet/39cd95b5f74930e3ec6a61c5f09014cbeb1.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/39cd95b5f74930e3ec6a61c5f09014cbeb1.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>安装完成后配置文件都拷贝到/etc/fdfs目录下了：<br><a href="https://oscimg.oschina.net/oscnet/2c50c35c47593d618dd6839cd509c64eb7f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/2c50c35c47593d618dd6839cd509c64eb7f.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>拷贝/etc/fdfs目录下的Storage配置文件示例：cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf<br>修改 /etc/fdfs/storage.conf中配置项：<br>base_path=/home/yuqing/fastdfs 改为：base_path=/work/fastdfs/storage(该目录为自己定义，启动时会用，没有会报错)<br>store_path0=/home/yuqing/fastdfs 改为：store_path0=/work/fastdfs/storage(该目录为自己定义，启动时会用，没有会报错)<br>tracker_server=192.168.209.121:22122 改为：tracker_server=192.168.100.101:22122<br>安装完成后启动脚本都拷贝到/etc/init.d目录下了：<br><a href="https://oscimg.oschina.net/oscnet/41d522edb4ebd80069b4e02d216ee3662e7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/41d522edb4ebd80069b4e02d216ee3662e7.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>将/etc/init.d/fdfs_trackerd删掉，因为这台机器只安装Storage服务<br>注：编译安装fastdfs需要perl库依赖<br>设置Storage服务开机自启动：<br>chkconfig –add fdfs_storaged<br>chkconfig fdfs_storaged on<br><a href="https://oscimg.oschina.net/oscnet/f4454c72a831523fd16864f2e143df31c1c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/f4454c72a831523fd16864f2e143df31c1c.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>启动Storage服务：systemctl start fdfs_storaged<br>重启Storage服务：systemctl restart fdfs_storaged<br>停止Storage服务：systemctl stop fdfs_storaged<br>开放Storage服务端口：<br>iptables -I INPUT -p tcp –dport 23000 -j ACCEPT<br>iptables -I INPUT -p tcp –dport 8888 -j ACCEPT<br><a href="https://oscimg.oschina.net/oscnet/070ac7f4d6651de1ca22ff603a63f3f92c5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/070ac7f4d6651de1ca22ff603a63f3f92c5.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>Storage服务启动正常，进入数据目录中，可以看到已经有了初始数据信息：<br><a href="https://oscimg.oschina.net/oscnet/38304c00e21b90a6288bb2d1bdf3427877d.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/38304c00e21b90a6288bb2d1bdf3427877d.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>验证当前Storage服务和Tracker服务通信情况：<br>/usr/bin/fdfs_monitor /etc/fdfs/storage.conf<br><a href="https://oscimg.oschina.net/oscnet/d418bf557ff315a754631c5e7a94fc669f2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/d418bf557ff315a754631c5e7a94fc669f2.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="安装Nginx和fdfs-nginx模块"><a href="#安装Nginx和fdfs-nginx模块" class="headerlink" title="安装Nginx和fdfs-nginx模块"></a>安装Nginx和fdfs-nginx模块</h3><p>在每个Storage服务节点上安装Nginx服务以及fdfs-nginx模块。<br>首先安装nginx需要的依赖：yum install -y gcc gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel<br>解压nginx安装包：tar -zxvf nginx-1.16.1.tar.gz<br>安装配置Nginx：./configure –prefix=/work/nginx –add-module=../fastdfs-nginx-module-1.21/src<br>编译安装Nginx：make &amp;&amp; make install<br>将fastdfs-nginx-module-1.21/src下的mod_fastdfs.conf拷贝到/etc/fdfs下<br>修改mod_fastdfs.conf如下：<br>连接超时时间： connect_timeout=10<br>Tracker服务地址：tracker_server=192.168.100.101:22122<br>Storage服务端口：storage_server_port=23000<br>如果文件ID的uri中包含/group**，则要设置为true：url_have_group_name = true<br>Storage配置的store_path0路径，必须和storage.conf中的一致：store_path0=/work/fastdfs/storage<br>拷贝/etc/fdfs/torage_ids.conf.sample 为torage_ids.conf，内容修改为当前group的storage节点信息：<br><a href="https://oscimg.oschina.net/oscnet/b615441115b8325565fc1d976d943c41596.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/b615441115b8325565fc1d976d943c41596.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>修改各个Storage机器上的nginx服务的配置如下：</p><h2 id="使用Java客户端测试FastDFS"><a href="#使用Java客户端测试FastDFS" class="headerlink" title="使用Java客户端测试FastDFS"></a><strong>使用Java客户端测试FastDFS</strong></h2><h3 id="java项目Maven依赖"><a href="#java项目Maven依赖" class="headerlink" title="java项目Maven依赖"></a>java项目Maven依赖</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">项目地址：https:&#x2F;&#x2F;github.com&#x2F;tobato&#x2F;FastDFS_Client</span><br><span class="line">目前客户端主要依赖于SpringBoot，因此必须引入:</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">FastDFS 依赖包：</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.tobato&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastdfs-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.26.7&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">将FastDFS引入项目：</span><br><span class="line">@Import(FdfsClientConfig.class)</span><br><span class="line"></span><br><span class="line">在application.yml当中配置Fdfs相关参数：</span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"># 分布式文件系统FDFS配置</span><br><span class="line"># &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">fdfs:</span><br><span class="line">  so-timeout: 1500</span><br><span class="line">  connect-timeout: 600</span><br><span class="line">  thumb-image:</span><br><span class="line">    width: 150</span><br><span class="line">    height: 150</span><br><span class="line">  tracker-list:</span><br><span class="line">    - 192.168.100.101:22122</span><br><span class="line"></span><br><span class="line">使用接口服务对Fdfs服务端进行操作，主要接口包括：</span><br><span class="line">TrackerClient - TrackerServer接口</span><br><span class="line">GenerateStorageClient - 一般文件存储接口 (StorageServer接口)</span><br><span class="line">FastFileStorageClient - 为方便项目开发集成的简单接口(StorageServer接口)</span><br><span class="line">AppendFileStorageClient - 支持文件续传操作的接口 (StorageServer接口)</span><br></pre></td></tr></table></figure></div><h3 id="实际测试案例"><a href="#实际测试案例" class="headerlink" title="实际测试案例"></a>实际测试案例</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.maxbill;</span><br><span class="line"></span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.MetaData;</span><br><span class="line">import com.github.tobato.fastdfs.domain.fdfs.StorePath;</span><br><span class="line">import com.github.tobato.fastdfs.service.FastFileStorageClient;</span><br><span class="line">import com.github.tobato.fastdfs.service.TrackerClient;</span><br><span class="line">import lombok.extern.log4j.Log4j2;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import javax.annotation.PostConstruct;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.util.HashSet;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">@Log4j2</span><br><span class="line">@Component</span><br><span class="line">public class FdfsClientUtil &#123;</span><br><span class="line"></span><br><span class="line">    private static FdfsClientUtil fdfsClientUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private TrackerClient trackerClient;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private FastFileStorageClient storageClient;</span><br><span class="line"></span><br><span class="line">    @PostConstruct</span><br><span class="line">    public void init() &#123;</span><br><span class="line">        fdfsClientUtil &#x3D; this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static Set&lt;MetaData&gt; getMetaData(Map&lt;String, String&gt; infoMap) &#123;</span><br><span class="line">        Set&lt;MetaData&gt; metaDataSet &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        metaDataSet.add(new MetaData(&quot;createUser&quot;, &quot;maxbill&quot;));</span><br><span class="line">        metaDataSet.add(new MetaData(&quot;createDate&quot;, &quot;2019-11-18&quot;));</span><br><span class="line">        return metaDataSet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String uploadFile(File file, Map&lt;String, String&gt; infoMap) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String fileName &#x3D; file.getName();</span><br><span class="line">            String fileType &#x3D; fileName.substring(fileName.lastIndexOf(&quot;\\&quot;) + 1);</span><br><span class="line">            log.info(&quot;upload file name: &#123;&#125;&quot;, fileName);</span><br><span class="line">            StorePath path &#x3D; fdfsClientUtil.storageClient.uploadFile(new FileInputStream(file), file.length(), fileType, getMetaData(infoMap));</span><br><span class="line">            log.info(&quot;upload success path: &#123;&#125;&quot;, path);</span><br><span class="line">            Set&lt;MetaData&gt; metaData &#x3D; fdfsClientUtil.storageClient.getMetadata(path.getGroup(), path.getPath());</span><br><span class="line">            log.info(&quot;upload success meta: &#123;&#125;&quot;, metaData);</span><br><span class="line">            return path.getFullPath();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">            return e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      分布式文件系统FastDFS安装部署(非高可用)
    
    </summary>
    
    
      <category term="学分布式" scheme="https://www.maxbill.cn/kinds/%E5%AD%A6%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="FastDFS" scheme="https://www.maxbill.cn/marks/FastDFS/"/>
    
      <category term="分布式文件系统" scheme="https://www.maxbill.cn/marks/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="高可用" scheme="https://www.maxbill.cn/marks/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>K8S(04)模拟生产环境搭建高可用集群之Etcd集群部署</title>
    <link href="https://www.maxbill.cn/3877702786.html"/>
    <id>https://www.maxbill.cn/3877702786.html</id>
    <published>2019-11-02T13:54:03.000Z</published>
    <updated>2020-02-15T07:40:59.527Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>本文我们首先要说到什么是etcd，为什么kubernetes要使用etcd ，然后实践下二进制安装部署etcd集群。</p><h2 id="Etcd组件简介"><a href="#Etcd组件简介" class="headerlink" title="Etcd组件简介"></a><strong>Etcd组件简介</strong></h2><p>Etcd是一个高可用的键值存储系统，快速地保存和提供对关键数据的访问。它通过分布式锁定，领导者选举和写入障碍实现可靠的分布式协调。etcd集群旨在实现高可用性和永久数据存储和检索。主要用于共享配置和服务发现，它通过Raft一致性算法处理日志复制以保证强一致性，我们可以理解它为一个高可用强一致性的服务发现存储仓库。Etcd主要解决的是分布式系统中数据一致性的问题，而分布式系统中的数据分为控制数据和应用数据，etcd处理的数据类型为控制数据，对于很少量的应用数据也可以进行处理。</p><p>Etcd和Zookeeper的比较：<br>1.zk相比部署维护复杂复杂，使用也复杂，学习成本较高。而etcd部署简单，使用HTTP作为接口使用简单，使用Raft算法保证强一致性让用户易于理解。<br>2.zk使用Java编写，需要jvm才能运行，会引入大量的依赖，相对偏于中性应用。<br>3.zk发展缓慢。而etcd被k8s作为默认存储系统，升级迭代迅速。<br>4.etcd更安全，支持SSL客户端安全认证。</p><h2 id="K8S和ETCD的关系"><a href="#K8S和ETCD的关系" class="headerlink" title="K8S和ETCD的关系"></a><strong>K8S和ETCD的关系</strong></h2><p>kubernetes官方默认使用etcd组件作为自己的高可用强一致性的服务发现存储仓库，在kubernetes集群中etcd主要用于配置数据共享和服务发现，把关键数据都存放在etcd键值存储中，这使得kubernetes的整体结构变得非常简单。在kubernetes中由于数据是随时发生变化的，提交了新任务、增加了新的Node、Node宕机了、容器死掉了等，都会触发状态数据的变更。集群状态数据变更之后，Master上的kube-scheduler和kube-controller-manager，就会重新安排工作，它们的工作安排结果也是数据。由于集群内状态数据变化都需要及时地通知给每一个组件，刚好etcd有一个特别好的特性，可以调用它的api监听其中的数据，一旦数据发生变化了就会收到通知。有了这个特性之后kubernetes中的每个组件只需要监听etcd中数据，就可以知道自己应该做什么。kube-scheduler和kube-controller-manager也只需要把最新的工作安排写入到etcd中就可以了，不用自己去逐个通知了。还有就是etcd使用raft协议实现一致性，是一个分布式锁可以用来做选举。如果在kubernetes中部署了多个kube-schdeuler，那么同一时刻只能有一个kube-scheduler在工作，要保证只有一个kube-schduler在工作呢就通过etcd选举出一个leader来实现。</p><h2 id="二进制部署etcd集群"><a href="#二进制部署etcd集群" class="headerlink" title="二进制部署etcd集群"></a><strong>二进制部署etcd集群</strong></h2><p>官网地址：<a href="https://etcd.io/" target="_blank" rel="noopener">https://etcd.io/</a><br>文档地址：<a href="https://etcd.io/docs/" target="_blank" rel="noopener">https://etcd.io/docs/</a><br>项目地址：<a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener">https://github.com/etcd-io/etcd</a><br>下载地址：<a href="https://github.com/etcd-io/etcd/releases" target="_blank" rel="noopener">https://github.com/etcd-io/etcd/releases</a></p><h3 id="下载etcd二进制安装包"><a href="#下载etcd二进制安装包" class="headerlink" title="下载etcd二进制安装包"></a>下载etcd二进制安装包</h3><p>本文使用最新版本3.4.3,下载适合自己硬件平台的，本文使用：etcd-v3.4.3-linux-amd64.tar.gz</p><h3 id="解压etcd二进制安装包"><a href="#解压etcd二进制安装包" class="headerlink" title="解压etcd二进制安装包"></a>解压etcd二进制安装包</h3><p>tar -zxvf etcd-v3.4.3-linux-amd64.tar.gz</p><h3 id="安装二进制程序"><a href="#安装二进制程序" class="headerlink" title="安装二进制程序"></a>安装二进制程序</h3><p>mkdir -p /work/etcd/{cfg,bin,dat,run,wal}<br>将etcd和etcdctl文件复制到/work/etcd/bin/目录下<br>创建软连接：<br>ln -s /work/etcd/bin/etcd /usr/local/bin/etcd<br>ln -s /work/etcd/bin/etcdctl /usr/local/bin/etcdctl<br><a href="https://oscimg.oschina.net/oscnet/1b275b9734ebf438516abb3b30aff494a62.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/1b275b9734ebf438516abb3b30aff494a62.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="编写注册系统服务文件"><a href="#编写注册系统服务文件" class="headerlink" title="编写注册系统服务文件"></a>编写注册系统服务文件</h3><p>vi /usr/lib/systemd/system/etcd.service 如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;etcd</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;github.com&#x2F;etcd-io&#x2F;etcd</span><br><span class="line">Conflicts&#x3D;etcd.service</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">After&#x3D;network-online.target</span><br><span class="line">Wants&#x3D;network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;notify</span><br><span class="line">Restart&#x3D;always</span><br><span class="line">RestartSec&#x3D;5s</span><br><span class="line">LimitNOFILE&#x3D;40000</span><br><span class="line">TimeoutStartSec&#x3D;0</span><br><span class="line">WorkingDirectory&#x3D;&#x2F;work&#x2F;etcd&#x2F;run&#x2F;</span><br><span class="line">ExecStart&#x3D;&#x2F;work&#x2F;etcd&#x2F;bin&#x2F;etcd --config-file&#x3D;&#x2F;work&#x2F;etcd&#x2F;cfg&#x2F;etcd.yml</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/9212abb74e27d6a235e4dd8472138bcaac1.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/9212abb74e27d6a235e4dd8472138bcaac1.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="生成Etcd服务需要的证书"><a href="#生成Etcd服务需要的证书" class="headerlink" title="生成Etcd服务需要的证书"></a>生成Etcd服务需要的证书</h3><p>准备证书生成工具<br>curl -L <a href="https://pkg.cfssl.org/R1.2/cfssl_linux-amd64" target="_blank" rel="noopener">https://pkg.cfssl.org/R1.2/cfssl_linux-amd64</a> -o ./cfssl<br>curl -L <a href="https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64" target="_blank" rel="noopener">https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64</a> -o ./cfssljson<br>curl -L <a href="https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64" target="_blank" rel="noopener">https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64</a> -o ./cfssl-certinfo</p><p>注意：本文在模拟内网环境下二进制安装，所以下载完成后传到机器上的/usr/local/bin<br><a href="https://oscimg.oschina.net/oscnet/72d7ba3e589ae7be36bdd8e40524535574c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/72d7ba3e589ae7be36bdd8e40524535574c.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/8410625bfe372a2cc3bd5f165b2845d4f46.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/8410625bfe372a2cc3bd5f165b2845d4f46.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><p>创建全局证书目录mkdir cert<br><a href="https://oscimg.oschina.net/oscnet/b1393b7bce91e96a9595a3984889c97db6c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/b1393b7bce91e96a9595a3984889c97db6c.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><p>创建认证中心(CA)<br>cfssl print-defaults config &gt; ca-etcd-config.json # 默认证书生产策略配置模板<br>cfssl print-defaults csr &gt; ca-etcd-csr.json #默认csr请求模板</p><p>修改模板自定义内容vi ca-etcd-config.json 如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;signing&quot;: &#123;</span><br><span class="line">        &quot;default&quot;: &#123;</span><br><span class="line">            &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;profiles&quot;: &#123;</span><br><span class="line">            &quot;etcd&quot;: &#123;</span><br><span class="line">                &quot;expiry&quot;: &quot;87600h&quot;,</span><br><span class="line">                &quot;usages&quot;: [</span><br><span class="line">                    &quot;signing&quot;,</span><br><span class="line">                    &quot;key encipherment&quot;,</span><br><span class="line">                    &quot;server auth&quot;,</span><br><span class="line">                    &quot;client auth&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>注意：<br>ca-config.json：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时可以指定使用某个 profile；此实例只有一个etcd。<br>signing：表示该证书可用于签名其它证书；生成的 ca-etcd.pem 证书中 CA=TRUE；<br>server auth：表示client可以用该 CA 对server提供的证书进行验证；<br>client auth：表示server可以用该CA对client提供的证书进行验证；</p><p>修改模板自定义内容ca-etcd-csr.json 如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;SH&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;BS&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>生成证书（ca-etcd-key.pem）和秘钥(ca-etcd.pem)<br>cfssl gencert -initca ca-etcd-csr.json | cfssljson -bare ca-etcd<br><a href="https://oscimg.oschina.net/oscnet/b5af566d555c23adff00539276d0364021a.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/b5af566d555c23adff00539276d0364021a.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><p>创建etcd证书签名请求, vi etcd-csr.json 如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;CN&quot;: &quot;etcd&quot;,</span><br><span class="line">  &quot;hosts&quot;: [</span><br><span class="line">    &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;192.168.100.111&quot;,</span><br><span class="line">    &quot;192.168.100.112&quot;,</span><br><span class="line">    &quot;192.168.100.113&quot;,</span><br><span class="line">    &quot;kube-cluster-master01&quot;,</span><br><span class="line">    &quot;kube-cluster-master02&quot;,</span><br><span class="line">    &quot;kube-cluster-master03&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;key&quot;: &#123;</span><br><span class="line">    &quot;algo&quot;: &quot;rsa&quot;,</span><br><span class="line">    &quot;size&quot;: 2048</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;names&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;C&quot;: &quot;CN&quot;,</span><br><span class="line">      &quot;ST&quot;: &quot;SH&quot;,</span><br><span class="line">      &quot;L&quot;: &quot;BS&quot;,</span><br><span class="line">      &quot;O&quot;: &quot;etcd&quot;,</span><br><span class="line">      &quot;OU&quot;: &quot;System&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>生成etcd证书<br>cfssl gencert -ca=/work/cert/ca-etcd.pem \<br>-ca-key=/work/cert/ca-etcd-key.pem \<br>-config=/work/cert/ca-etcd-config.json \<br>-profile=etcd etcd-csr.json | cfssljson -bare etcd<br>生成的如下文件：etcd.csr etcd-key.pem etcd.pem 将三个证书拷贝到其他两个节点上<br><a href="https://oscimg.oschina.net/oscnet/38ea93385af6779effc5d7eaecf3342ae42.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/38ea93385af6779effc5d7eaecf3342ae42.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="编写Etcd服务配置文件"><a href="#编写Etcd服务配置文件" class="headerlink" title="编写Etcd服务配置文件"></a>编写Etcd服务配置文件</h3><p>节点1配置文件：vi /work/etcd/cfg/etcd.yml</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">name: kube-etcd-node01</span><br><span class="line">wal-dir: &#x2F;work&#x2F;etcd&#x2F;wal</span><br><span class="line">data-dir: &#x2F;work&#x2F;etcd&#x2F;dat&#x2F;default.etcd</span><br><span class="line">listen-peer-urls: https:&#x2F;&#x2F;192.168.100.111:2380</span><br><span class="line">listen-client-urls: https:&#x2F;&#x2F;192.168.100.111:2379,https:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line"></span><br><span class="line">advertise-client-urls: https:&#x2F;&#x2F;192.168.100.111:2379</span><br><span class="line">initial-advertise-peer-urls: https:&#x2F;&#x2F;192.168.100.111:2380</span><br><span class="line">initial-cluster: kube-etcd-node01&#x3D;https:&#x2F;&#x2F;192.168.100.111:2380,kube-etcd-node02&#x3D;https:&#x2F;&#x2F;192.168.100.112:2380,kube-etcd-node03&#x3D;https:&#x2F;&#x2F;192.168.100.113:2380</span><br><span class="line">initial-cluster-token: kube-etcd-cluster</span><br><span class="line">initial-cluster-state: new</span><br><span class="line"></span><br><span class="line">client-transport-security:</span><br><span class="line">  cert-file: &#x2F;work&#x2F;cert&#x2F;etcd.pem</span><br><span class="line">  key-file: &#x2F;work&#x2F;cert&#x2F;etcd-key.pem</span><br><span class="line">  client-cert-auth: false</span><br><span class="line">  trusted-ca-file: &#x2F;work&#x2F;cert&#x2F;ca-etcd.pem</span><br><span class="line">  auto-tls: false</span><br><span class="line"></span><br><span class="line">peer-transport-security:</span><br><span class="line">  cert-file: &#x2F;work&#x2F;cert&#x2F;etcd.pem</span><br><span class="line">  key-file: &#x2F;work&#x2F;cert&#x2F;etcd-key.pem</span><br><span class="line">  client-cert-auth: false</span><br><span class="line">  trusted-ca-file: &#x2F;work&#x2F;cert&#x2F;ca-etcd.pem</span><br><span class="line">  auto-tls: false</span><br><span class="line"></span><br><span class="line">debug: false</span><br><span class="line">logger: zap</span><br><span class="line">log-outputs: [stderr]</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/b14b7a3f9f9a7b2c87770c26e11256d1df9.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/b14b7a3f9f9a7b2c87770c26e11256d1df9.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><p>节点2配置文件：vim /work/etcd/cfg/etcd.yml</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">name: kube-etcd-node02</span><br><span class="line">wal-dir: &#x2F;work&#x2F;etcd&#x2F;wal</span><br><span class="line">data-dir: &#x2F;work&#x2F;etcd&#x2F;dat&#x2F;default.etcd</span><br><span class="line">listen-peer-urls: https:&#x2F;&#x2F;192.168.100.112:2380</span><br><span class="line">listen-client-urls: https:&#x2F;&#x2F;192.168.100.112:2379,https:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line"></span><br><span class="line">advertise-client-urls: https:&#x2F;&#x2F;192.168.100.112:2379</span><br><span class="line">initial-advertise-peer-urls: https:&#x2F;&#x2F;192.168.100.112:2380</span><br><span class="line">initial-cluster: kube-etcd-node01&#x3D;https:&#x2F;&#x2F;192.168.100.111:2380,kube-etcd-node02&#x3D;https:&#x2F;&#x2F;192.168.100.112:2380,kube-etcd-node03&#x3D;https:&#x2F;&#x2F;192.168.100.113:2380</span><br><span class="line">initial-cluster-token: kube-etcd-cluster</span><br><span class="line">initial-cluster-state: new</span><br><span class="line"></span><br><span class="line">client-transport-security:</span><br><span class="line">  cert-file: &#x2F;work&#x2F;cert&#x2F;etcd.pem</span><br><span class="line">  key-file: &#x2F;work&#x2F;cert&#x2F;etcd-key.pem</span><br><span class="line">  client-cert-auth: false</span><br><span class="line">  trusted-ca-file: &#x2F;work&#x2F;cert&#x2F;ca-etcd.pem</span><br><span class="line">  auto-tls: false</span><br><span class="line"></span><br><span class="line">peer-transport-security:</span><br><span class="line">  cert-file: &#x2F;work&#x2F;cert&#x2F;etcd.pem</span><br><span class="line">  key-file: &#x2F;work&#x2F;cert&#x2F;etcd-key.pem</span><br><span class="line">  client-cert-auth: false</span><br><span class="line">  trusted-ca-file: &#x2F;work&#x2F;cert&#x2F;ca-etcd.pem</span><br><span class="line">  auto-tls: false</span><br><span class="line"></span><br><span class="line">debug: false</span><br><span class="line">logger: zap</span><br><span class="line">log-outputs: [stderr]</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/3bfffdceaa5bb59bebff0c21e6bf277c4a5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/3bfffdceaa5bb59bebff0c21e6bf277c4a5.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><p>节点3配置文件：vi /work/etcd/cfg/etcd.conf</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">name: kube-etcd-node03</span><br><span class="line">wal-dir: &#x2F;work&#x2F;etcd&#x2F;wal</span><br><span class="line">data-dir: &#x2F;work&#x2F;etcd&#x2F;dat&#x2F;default.etcd</span><br><span class="line">listen-peer-urls: https:&#x2F;&#x2F;192.168.100.113:2380</span><br><span class="line">listen-client-urls: https:&#x2F;&#x2F;192.168.100.113:2379,https:&#x2F;&#x2F;127.0.0.1:2379</span><br><span class="line"></span><br><span class="line">advertise-client-urls: https:&#x2F;&#x2F;192.168.100.113:2379</span><br><span class="line">initial-advertise-peer-urls: https:&#x2F;&#x2F;192.168.100.113:2380</span><br><span class="line">initial-cluster: kube-etcd-node01&#x3D;https:&#x2F;&#x2F;192.168.100.111:2380,kube-etcd-node02&#x3D;https:&#x2F;&#x2F;192.168.100.112:2380,kube-etcd-node03&#x3D;https:&#x2F;&#x2F;192.168.100.113:2380</span><br><span class="line">initial-cluster-token: kube-etcd-cluster</span><br><span class="line">initial-cluster-state: new</span><br><span class="line"></span><br><span class="line">client-transport-security:</span><br><span class="line">  cert-file: &#x2F;work&#x2F;cert&#x2F;etcd.pem</span><br><span class="line">  key-file: &#x2F;work&#x2F;cert&#x2F;etcd-key.pem</span><br><span class="line">  client-cert-auth: false</span><br><span class="line">  trusted-ca-file: &#x2F;work&#x2F;cert&#x2F;ca-etcd.pem</span><br><span class="line">  auto-tls: false</span><br><span class="line"></span><br><span class="line">peer-transport-security:</span><br><span class="line">  cert-file: &#x2F;work&#x2F;cert&#x2F;etcd.pem</span><br><span class="line">  key-file: &#x2F;work&#x2F;cert&#x2F;etcd-key.pem</span><br><span class="line">  client-cert-auth: false</span><br><span class="line">  trusted-ca-file: &#x2F;work&#x2F;cert&#x2F;ca-etcd.pem</span><br><span class="line">  auto-tls: false</span><br><span class="line"></span><br><span class="line">debug: false</span><br><span class="line">logger: zap</span><br><span class="line">log-outputs: [stderr]</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/4946d5e28089425670ac5bb06a6c1e9280f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/4946d5e28089425670ac5bb06a6c1e9280f.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="启动ETCD服务"><a href="#启动ETCD服务" class="headerlink" title="启动ETCD服务"></a>启动ETCD服务</h3><p>以上步骤在三个节点上都操作完成后，分别在三个节点上执行以下操作：<br>systemctl daemon-reload<br>systemctl enable etcd<br>systemctl start etcd<br><a href="https://oscimg.oschina.net/oscnet/776dc2102b9d40543e710c15672a2c8f42f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/776dc2102b9d40543e710c15672a2c8f42f.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/76104916badd5634169b73a750cba5d4a41.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/76104916badd5634169b73a750cba5d4a41.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/4a4b5a7ec6c1b476ab2e8da1210cd6594f5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/4a4b5a7ec6c1b476ab2e8da1210cd6594f5.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="验证ETCD服务"><a href="#验证ETCD服务" class="headerlink" title="验证ETCD服务"></a>验证ETCD服务</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">etcdctl --cacert&#x3D;&#x2F;work&#x2F;cert&#x2F;ca-etcd.pem \</span><br><span class="line"> --cert&#x3D;&#x2F;work&#x2F;cert&#x2F;etcd.pem \</span><br><span class="line"> --key&#x3D;&#x2F;work&#x2F;cert&#x2F;etcd-key.pem \</span><br><span class="line"> --endpoints&#x3D;https:&#x2F;&#x2F;192.168.100.111:2379,https:&#x2F;&#x2F;192.168.100.112:2379,https:&#x2F;&#x2F;192.168.100.113:2379 endpoint health</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/b59f25fde169b28a953d3d1b7d6d5c0ffe5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/b59f25fde169b28a953d3d1b7d6d5c0ffe5.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl --write-out&#x3D;table \</span><br><span class="line"> --cacert&#x3D;&#x2F;work&#x2F;cert&#x2F;ca-etcd.pem \</span><br><span class="line"> --cert&#x3D;&#x2F;work&#x2F;cert&#x2F;etcd.pem \</span><br><span class="line"> --key&#x3D;&#x2F;work&#x2F;cert&#x2F;etcd-key.pem \</span><br><span class="line"> --endpoints&#x3D;https:&#x2F;&#x2F;192.168.100.111:2379,https:&#x2F;&#x2F;192.168.100.112:2379,https:&#x2F;&#x2F;192.168.100.113:2379 endpoint status</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/b70b14f70a02f817ba9f23075588881ee79.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/b70b14f70a02f817ba9f23075588881ee79.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">etcdctl --write-out&#x3D;table \</span><br><span class="line"> --cacert&#x3D;&#x2F;work&#x2F;cert&#x2F;ca-etcd.pem \</span><br><span class="line"> --cert&#x3D;&#x2F;work&#x2F;cert&#x2F;etcd.pem \</span><br><span class="line"> --key&#x3D;&#x2F;work&#x2F;cert&#x2F;etcd-key.pem \</span><br><span class="line"> --endpoints&#x3D;https:&#x2F;&#x2F;192.168.100.111:2379,https:&#x2F;&#x2F;192.168.100.112:2379,https:&#x2F;&#x2F;192.168.100.113:2379 member list</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/628e26988085001164dd51dce5d0edde660.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/628e26988085001164dd51dce5d0edde660.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      K8S(04)模拟生产环境搭建高可用集群之Etcd集群部署
    
    </summary>
    
    
      <category term="开发运维" scheme="https://www.maxbill.cn/kinds/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="K8S" scheme="https://www.maxbill.cn/marks/K8S/"/>
    
      <category term="Kubernetes" scheme="https://www.maxbill.cn/marks/Kubernetes/"/>
    
      <category term="容器化" scheme="https://www.maxbill.cn/marks/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
      <category term="Etcd" scheme="https://www.maxbill.cn/marks/Etcd/"/>
    
  </entry>
  
  <entry>
    <title>K8S(03)模拟生产环境搭建高可用集群之Master节点高可用方案</title>
    <link href="https://www.maxbill.cn/2830891998.html"/>
    <id>https://www.maxbill.cn/2830891998.html</id>
    <published>2019-10-29T05:35:03.000Z</published>
    <updated>2020-02-15T08:05:57.437Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>注意：本高可用方案不仅适用于本文的K8S主控节点的高可用，还适用于任何需要高可用的业务场景，haproxy可改用nginx或其他负载均衡器实现<br>大家都知道在生产环境部署服务一定要坚持一条：不允许出现单点故障。我们在测试环境部署k8s的架构一般是单主控Master节点多个工作Node节点，生产上部署K8S集群要避免主控节点宕机，我们需要对主控节点进行高可用部署。<br>生产环境对主控节点的高可用的解决方案：对主控节点部署多台（3台以上），然后多部署多台（一般2台以上）负载均衡器（一般选用Nginx或者Haproxy）来对主控节点的api-server服务进行负载以防止单点故障。本文将详细说明怎么对主控节点的api-server服务高可用，主要讲负载均衡器配置值部署这一块，集群的详细搭建在后面的文章中。</p><p><a href="https://oscimg.oschina.net/oscnet/6887ab8539a10f71a7108e6f6b029bb80a5.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/6887ab8539a10f71a7108e6f6b029bb80a5.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>主工作节点：192.168.100.107<br>从工作节点：192.168.100.108<br>虚拟IP ：192.168.100.110</p><h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a><strong>环境说明</strong></h2><p>系统环境：CentOS7.7<br>Keepalived版本：2.0.19<br>Haproxy版本：2.0.8</p><h2 id="安装配置Keepalived服务"><a href="#安装配置Keepalived服务" class="headerlink" title="安装配置Keepalived服务"></a><strong>安装配置Keepalived服务</strong></h2><h3 id="下载Keepalived源码包"><a href="#下载Keepalived源码包" class="headerlink" title="下载Keepalived源码包"></a>下载Keepalived源码包</h3><p>官网地址：<a href="https://www.keepalived.org/" target="_blank" rel="noopener">https://www.keepalived.org/</a><br>下载地址：<a href="https://www.keepalived.org/software/keepalived-2.0.19.tar.gz" target="_blank" rel="noopener">https://www.keepalived.org/software/keepalived-2.0.19.tar.gz</a></p><h3 id="上传并解压Keepalived源码包"><a href="#上传并解压Keepalived源码包" class="headerlink" title="上传并解压Keepalived源码包"></a>上传并解压Keepalived源码包</h3><p>tar -zxvf keepalived-2.0.19.tar.gz</p><h3 id="编译Keepalived准备"><a href="#编译Keepalived准备" class="headerlink" title="编译Keepalived准备"></a>编译Keepalived准备</h3><p>进入解压目录：cd keepalived-2.0.19<br>执行编译准备：./configure –prefix=/work/keepalived<br>注意：一定要有gcc和openssl编译相关的依赖</p><h3 id="编译安装Keepalived"><a href="#编译安装Keepalived" class="headerlink" title="编译安装Keepalived"></a>编译安装Keepalived</h3><p>make &amp;&amp; make install</p><h3 id="安装配置Keepalived"><a href="#安装配置Keepalived" class="headerlink" title="安装配置Keepalived"></a>安装配置Keepalived</h3><p>keepalived启动时会从/etc/keepalived/中相关的目录下查找keepalived.conf配置文件，因此将keepalived安装目录/usr/local/keepalived/etc/keepalived.conf 拷贝到/etc/keepalived/中。<br>mkdir /etc/keepalived/<br>cp /work/keepalived/etc/keepalived/keepalived.conf /etc/keepalived/keepalived.conf<br>cp /work/keepalived/etc/sysconfig/keepalived /etc/sysconfig/keepalived</p><h3 id="设置Keepalived开机启动项"><a href="#设置Keepalived开机启动项" class="headerlink" title="设置Keepalived开机启动项"></a>设置Keepalived开机启动项</h3><p>systemctl enable keepalived<br>然后就能使用systemctl start/stop/status keepalived管理keepalived了</p><h3 id="配置Keepalived服务"><a href="#配置Keepalived服务" class="headerlink" title="配置Keepalived服务"></a>配置Keepalived服务</h3><p>107机器的配置信息：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">       interval 3</span><br><span class="line">       script &quot;&#x2F;work&#x2F;script&#x2F;check_haproxy.sh&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance kube_master&#123;</span><br><span class="line">       state master</span><br><span class="line">       interface ens33</span><br><span class="line">       virtual_router_id 110</span><br><span class="line">       priority 100</span><br><span class="line">       advert_int 3</span><br><span class="line">       authentication &#123;</span><br><span class="line">            auth_type PASS</span><br><span class="line">            auth_pass kube_master_password</span><br><span class="line">       &#125;</span><br><span class="line">       virtual_ipaddress &#123;</span><br><span class="line">            192.168.100.110</span><br><span class="line">       &#125;</span><br><span class="line">       track_script &#123;</span><br><span class="line">            check_haproxy</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>108机器的配置信息：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vrrp_script check_haproxy &#123;</span><br><span class="line">       interval 3</span><br><span class="line">       script &quot;&#x2F;work&#x2F;script&#x2F;check_haproxy.sh&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance kube_master&#123;</span><br><span class="line">       state backup</span><br><span class="line">       interface ens33</span><br><span class="line">       virtual_router_id 110</span><br><span class="line">       priority 90</span><br><span class="line">       advert_int 3</span><br><span class="line">       authentication &#123;</span><br><span class="line">            auth_type PASS</span><br><span class="line">            auth_pass kube_master_password</span><br><span class="line">       &#125;</span><br><span class="line">       virtual_ipaddress &#123;</span><br><span class="line">            192.168.100.110</span><br><span class="line">       &#125;</span><br><span class="line">       track_script &#123;</span><br><span class="line">            check_haproxy</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="编写haproxy服务检测脚本"><a href="#编写haproxy服务检测脚本" class="headerlink" title="编写haproxy服务检测脚本"></a>编写haproxy服务检测脚本</h3><p>vi /work/script/check_haproxy.sh</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">active_status&#x3D;&#96;netstat -lntp|grep haproxy|wc -l&#96;</span><br><span class="line">if [ $active_status -gt 0 ]; then</span><br><span class="line">    exit 0</span><br><span class="line">else</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></div><p>然后给脚本赋予执行权限：chmod +x /work/script/check_haproxy.sh</p><h2 id="Haproxy安装部署"><a href="#Haproxy安装部署" class="headerlink" title="Haproxy安装部署"></a><strong>Haproxy安装部署</strong></h2><h3 id="下载Haproxy源码包"><a href="#下载Haproxy源码包" class="headerlink" title="下载Haproxy源码包"></a>下载Haproxy源码包</h3><p>官网地址：<a href="https://www.haproxy.org/" target="_blank" rel="noopener">https://www.haproxy.org/</a><br>下载地址：<a href="https://www.haproxy.org/download/2.0/src/haproxy-2.0.8.tar.gz" target="_blank" rel="noopener">https://www.haproxy.org/download/2.0/src/haproxy-2.0.8.tar.gz</a></p><h3 id="上传并解压Haproxy源码包"><a href="#上传并解压Haproxy源码包" class="headerlink" title="上传并解压Haproxy源码包"></a>上传并解压Haproxy源码包</h3><p>tar -zxvf haproxy-2.0.8.tar.gz</p><h3 id="编译Haproxy"><a href="#编译Haproxy" class="headerlink" title="编译Haproxy"></a>编译Haproxy</h3><p>需要的依赖库：openssl openssl-devel systemd-deve pcre zlib<br>make TARGET=linux-glibc USE_OPENSSL=1 USE_SYSTEMD=1 USE_PCRE=1 USE_ZLIB=1 USE_CRYPT_H=1 USE_LIBCRYPT=1<br>开启https模式：USE_OPENSSL=1<br>指定systemd模式：USE_SYSTEMD=1<br>支持pcre库：USE_PCRE=1<br>支持zlib库：USE_ZLIB=1<br>支持crypt_h库：USE_CRYPT_H=1<br>支持libcrypt库：USE_LIBCRYPT=1</p><h3 id="安装haproxy"><a href="#安装haproxy" class="headerlink" title="安装haproxy"></a>安装haproxy</h3><p>make install PREFIX=/work/haproxy<br>指定安装目录：PREFIX=/work/haproxy</p><h3 id="注册到系统服务"><a href="#注册到系统服务" class="headerlink" title="注册到系统服务"></a>注册到系统服务</h3><p>vi /usr/lib/systemd/system/haproxy.service</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;HAProxy Load Balancer</span><br><span class="line">After&#x3D;syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre&#x3D;&#x2F;work&#x2F;haproxy&#x2F;sbin&#x2F;haproxy -f &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg   -c -q</span><br><span class="line">ExecStart&#x3D;&#x2F;work&#x2F;haproxy&#x2F;sbin&#x2F;haproxy -Ws -f &#x2F;etc&#x2F;haproxy&#x2F;haproxy.cfg  -p &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -USR2 $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></div><h3 id="编写Haproxy配置文件"><a href="#编写Haproxy配置文件" class="headerlink" title="编写Haproxy配置文件"></a>编写Haproxy配置文件</h3><p>vi /etc/haproxy/haproxy.cfg</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log            127.0.0.1 local0</span><br><span class="line">    chroot         &#x2F;var&#x2F;lib&#x2F;haproxy</span><br><span class="line">    pidfile        &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn        4000</span><br><span class="line">    user           root</span><br><span class="line">    group          root</span><br><span class="line">    stats socket   &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats</span><br><span class="line">    daemon</span><br><span class="line"></span><br><span class="line">listen admin_stats</span><br><span class="line">    stats   enable</span><br><span class="line">    bind    *:8080</span><br><span class="line">    mode    http</span><br><span class="line">    option  httplog</span><br><span class="line">    log     global</span><br><span class="line">    maxconn 10</span><br><span class="line">    stats   refresh 30s</span><br><span class="line">    stats   uri &#x2F;admin</span><br><span class="line">    stats   realm haproxy</span><br><span class="line">    stats   auth admin:admin</span><br><span class="line">    stats   hide-version</span><br><span class="line">    stats   admin if TRUE</span><br><span class="line"> </span><br><span class="line">listen kube_cluster_api_server</span><br><span class="line">    log                        global</span><br><span class="line">    bind                       192.168.100.110:6443</span><br><span class="line">    mode                       tcp</span><br><span class="line">    option                     tcplog </span><br><span class="line">    timeout http-request       10s</span><br><span class="line">    timeout queue              1m</span><br><span class="line">    timeout connect            10s</span><br><span class="line">    timeout client             1m</span><br><span class="line">    timeout server             1m</span><br><span class="line">    timeout http-keep-alive    10s</span><br><span class="line">    timeout check              10s</span><br><span class="line">    maxconn                    3000</span><br><span class="line">    balance  roundrobin</span><br><span class="line">    server   kube_cluster_master01  192.168.100.111:6443  check  inter 5000 rise 2 fall 3</span><br><span class="line">    server   kube_cluster_master02  192.168.100.112:6443  check  inter 5000 rise 2 fall 3</span><br><span class="line">    server   kube_cluster_master03  192.168.100.113:6443  check  inter 5000 rise 2 fall 3</span><br></pre></td></tr></table></figure></div><h3 id="创建所需目录"><a href="#创建所需目录" class="headerlink" title="创建所需目录"></a>创建所需目录</h3><p>创建/var/lib/haproxy/stats文件<br>mkdir -p /var/lib/haproxy<br>touch /var/lib/haproxy/stats</p><h3 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h3><p>vi /etc/sysctl.conf<br>增加如下内容：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_nonlocal_bind &#x3D; 1  #启动haproxy的时候，允许忽视VIP的存在</span><br><span class="line">net.ipv4.ip_forward &#x3D; 1  #允许转发</span><br></pre></td></tr></table></figure></div><p>执行sysctl -p 保存结果，使结果生效<br>如果没有配置以上内核参数，那么haproxy在启动的会报出cannot bind socket的错误</p><h3 id="开放监控页面端口"><a href="#开放监控页面端口" class="headerlink" title="开放监控页面端口"></a>开放监控页面端口</h3><p>iptables -I INPUT -p tcp –dport 8080 -j ACCEPT</p><h3 id="安装验证"><a href="#安装验证" class="headerlink" title="安装验证"></a><strong>安装验证</strong></h3><p>两台机器上都完成了如上的安装配置后</p><h3 id="分别启动Keepalived服务"><a href="#分别启动Keepalived服务" class="headerlink" title="分别启动Keepalived服务"></a>分别启动Keepalived服务</h3><p>systemctl start keepalived</p><h3 id="分别启动Haproxy服务"><a href="#分别启动Haproxy服务" class="headerlink" title="分别启动Haproxy服务"></a>分别启动Haproxy服务</h3><p>systemctl start haproxy<br>分别登陆两台机器查看haproxy服务监控页面：<br><a href="https://oscimg.oschina.net/oscnet/460e6fa0851d1321e48a9ca1586fe4f5568.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/460e6fa0851d1321e48a9ca1586fe4f5568.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/8e9e7e824ef46623dc02f4d441332512053.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/8e9e7e824ef46623dc02f4d441332512053.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>分别查看两台机器的keepalived服务是否正常<br><a href="https://oscimg.oschina.net/oscnet/67fda154626f4c43acfa519c68e0c1642db.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/67fda154626f4c43acfa519c68e0c1642db.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/decd8975c1060bb3b406cc67ca3a3c31366.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/decd8975c1060bb3b406cc67ca3a3c31366.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>分别停止两台机器keepalived服务查看VIP分配的情况：<br><a href="https://oscimg.oschina.net/oscnet/157602697458db641b811533ff8e1e2a216.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/157602697458db641b811533ff8e1e2a216.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/f79d146070e1b329355dcdf49f647a257f6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/f79d146070e1b329355dcdf49f647a257f6.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><strong>常见问题</strong></h2><p>1.configure: error: no acceptable C compiler found in $PATH See `config.log’ for more details.<br>解决方法：安装gcc库<br>2.!!! OpenSSL is not properly installed on your system. !!! !!! Can not include OpenSSL headers files.<br>解决方法：安装openssl openssl-devel<br>3.*** WARNING - this build will not support IPVS with IPv6. Please install libnl/libnl-3 dev libraries to support IPv6 with IPVS.<br>解决方法：安装libnl libnl-devel</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      K8S(03)模拟生产环境搭建高可用集群之Master节点高可用方案
    
    </summary>
    
    
      <category term="开发运维" scheme="https://www.maxbill.cn/kinds/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="高可用" scheme="https://www.maxbill.cn/marks/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
      <category term="K8S" scheme="https://www.maxbill.cn/marks/K8S/"/>
    
      <category term="Kubernetes" scheme="https://www.maxbill.cn/marks/Kubernetes/"/>
    
      <category term="容器化" scheme="https://www.maxbill.cn/marks/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
      <category term="Haproxy" scheme="https://www.maxbill.cn/marks/Haproxy/"/>
    
      <category term="Keepalived" scheme="https://www.maxbill.cn/marks/Keepalived/"/>
    
  </entry>
  
  <entry>
    <title>K8S(02)模拟生产环境搭建高可用集群之Docker私服</title>
    <link href="https://www.maxbill.cn/1990740722.html"/>
    <id>https://www.maxbill.cn/1990740722.html</id>
    <published>2019-10-27T11:44:03.000Z</published>
    <updated>2020-02-15T08:16:26.226Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>由于kubernetes是对docker容器的编排，kubernetes搭建过程中需要从docker仓库中去拉取所需要的镜像。生产的k8s集群一般是搭建在内网中，因此需要在内网搭建一个Docker仓库私服。</p><h2 id="安装docker服务"><a href="#安装docker服务" class="headerlink" title="安装docker服务"></a><strong>安装docker服务</strong></h2><h3 id="下载docker二进制安装包："><a href="#下载docker二进制安装包：" class="headerlink" title="下载docker二进制安装包："></a>下载docker二进制安装包：</h3><p><a href="https://download.docker.com/linux/static/stable/x86_64/docker-19.03.4.tgz" target="_blank" rel="noopener">https://download.docker.com/linux/static/stable/x86_64/docker-19.03.4.tgz</a></p><h3 id="解压docker二进制包"><a href="#解压docker二进制包" class="headerlink" title="解压docker二进制包"></a>解压docker二进制包</h3><p>将下载的docker二进制包上传到服务器上，然后解压：<br>tar -zxvf docker-19.03.4.tgz<br><a href="https://oscimg.oschina.net/oscnet/d759a4c8df94ccea1baed1ebaa13e76b5e7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/d759a4c8df94ccea1baed1ebaa13e76b5e7.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="移动到系统bin目录"><a href="#移动到系统bin目录" class="headerlink" title="移动到系统bin目录"></a>移动到系统bin目录</h3><p>在解压目录执行：sudo cp docker/* /usr/bin/</p><h3 id="开启-docker-守护进程"><a href="#开启-docker-守护进程" class="headerlink" title="开启 docker 守护进程"></a>开启 docker 守护进程</h3><p>sudo dockerd &amp;<br><a href="https://oscimg.oschina.net/oscnet/ec1a2638e2e57cb50c12aed7b8cecb00dd6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/ec1a2638e2e57cb50c12aed7b8cecb00dd6.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>此时docker info 可以看到docker服务的信息<br><a href="https://oscimg.oschina.net/oscnet/6e36e9f227e712063e522270f3962fe244f.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/6e36e9f227e712063e522270f3962fe244f.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="增加docker启动参数文件"><a href="#增加docker启动参数文件" class="headerlink" title="增加docker启动参数文件"></a>增加docker启动参数文件</h3><p>sudo cat &gt; /etc/docker/daemon.json &lt;&lt;EOF<br>{<br>“insecure-registries”:[“192.168.100.101”]<br>}<br>EOF</p><h3 id="注册docker为系统服务"><a href="#注册docker为系统服务" class="headerlink" title="注册docker为系统服务"></a>注册docker为系统服务</h3><p>sudo vi /usr/lib/systemd/system/docker.service<br>文件内容如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Docker Application Container Engine</span><br><span class="line">Documentation&#x3D;https:&#x2F;&#x2F;docs.docker.com</span><br><span class="line">After&#x3D;network-online.target firewalld.service</span><br><span class="line">Wants&#x3D;network-online.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;notify</span><br><span class="line"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="line"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="line"># for containers run by docker</span><br><span class="line">ExecStartPost&#x3D;&#x2F;sbin&#x2F;iptables -I FORWARD -s 0.0.0.0&#x2F;0 -j ACCEPT</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;bin&#x2F;dockerd -H tcp:&#x2F;&#x2F;0.0.0.0:2375 -H unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;docker.sock </span><br><span class="line">ExecReload&#x3D;&#x2F;bin&#x2F;kill -s HUP $MAINPID</span><br><span class="line"> </span><br><span class="line"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="line"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br><span class="line">LimitNOFILE&#x3D;infinity</span><br><span class="line">LimitNPROC&#x3D;infinity</span><br><span class="line">LimitCORE&#x3D;infinity</span><br><span class="line"> </span><br><span class="line"># Uncomment TasksMax if your systemd version supports it.</span><br><span class="line"># Only systemd 226 and above support this version.</span><br><span class="line"># TasksMax&#x3D;infinity</span><br><span class="line">TimeoutStartSec&#x3D;0</span><br><span class="line"> </span><br><span class="line"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br><span class="line">Delegate&#x3D;yes</span><br><span class="line"> </span><br><span class="line"># kill only the docker process, not all processes in the cgroup</span><br><span class="line">KillMode&#x3D;process</span><br><span class="line"> </span><br><span class="line"># restart the docker process if it exits prematurely</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">StartLimitBurst&#x3D;3</span><br><span class="line">StartLimitInterval&#x3D;60s</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></div><p>然后就可使用service docker restart/stop/status 或者systemctl start/stop/status docker 等来操作docker服务<br><a href="https://oscimg.oschina.net/oscnet/fb473408b184be900af5a1d9533eb82e1d3.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/fb473408b184be900af5a1d9533eb82e1d3.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="添加docker开机自启动"><a href="#添加docker开机自启动" class="headerlink" title="添加docker开机自启动"></a>添加docker开机自启动</h3><p>sudo systemctl enable docker</p><h2 id="安装docker-compose服务"><a href="#安装docker-compose服务" class="headerlink" title="安装docker-compose服务"></a><strong>安装docker-compose服务</strong></h2><h3 id="下载docker-compose二进制包"><a href="#下载docker-compose二进制包" class="headerlink" title="下载docker-compose二进制包"></a>下载docker-compose二进制包</h3><p><a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a></p><h3 id="上传docker-compose二进制包"><a href="#上传docker-compose二进制包" class="headerlink" title="上传docker-compose二进制包"></a>上传docker-compose二进制包</h3><p>将下载的docker-compose-Linux-x86_64二进制包上传到服务器上</p><h3 id="移动到系统bin目录-1"><a href="#移动到系统bin目录-1" class="headerlink" title="移动到系统bin目录"></a>移动到系统bin目录</h3><p>在上传目录执行：sudo cp docker-compose-Linux-x86_64 /usr/bin/docker-compose<br>给docker-compose添加可执行权限：sudo chmod +x /usr/bin/docker-compose<br>然后docker-compose -v验证下：<br><a href="https://oscimg.oschina.net/oscnet/be83a60cb7e79a48c3762936df7141f342b.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/be83a60cb7e79a48c3762936df7141f342b.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h2 id="安装harbor服务"><a href="#安装harbor服务" class="headerlink" title="安装harbor服务"></a><strong>安装harbor服务</strong></h2><h3 id="下载harbor离线镜像包"><a href="#下载harbor离线镜像包" class="headerlink" title="下载harbor离线镜像包"></a>下载harbor离线镜像包</h3><p><a href="https://github.com/vmware/harbor/releases或https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/vmware/harbor/releases或https://github.com/goharbor/harbor/releases</a><br><a href="https://storage.googleapis.com/harbor-releases/release-1.9.0/harbor-offline-installer-v1.9.1.tgz" target="_blank" rel="noopener">https://storage.googleapis.com/harbor-releases/release-1.9.0/harbor-offline-installer-v1.9.1.tgz</a><br>注：离线安装包中是docker镜像，大概500多MB</p><h3 id="解压harbor离线安装包"><a href="#解压harbor离线安装包" class="headerlink" title="解压harbor离线安装包"></a>解压harbor离线安装包</h3><p>将下载的harbor-offline-installer-v1.9.1.tgz离线安装包上传到服务器上<br>然后解压：tar -zxvf harbor-offline-installer-v1.9.1.tgz<br><a href="https://oscimg.oschina.net/oscnet/3d687f4f896629fd9c9095885e738e0a74c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/3d687f4f896629fd9c9095885e738e0a74c.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="创建https证书"><a href="#创建https证书" class="headerlink" title="创建https证书"></a>创建https证书</h3><p>mkdir cert &amp;&amp; cd cert<br>创建https证书，根据官方文档：<a href="https://github.com/goharbor/harbor/blob/master/docs/configure_https.md" target="_blank" rel="noopener">https://github.com/goharbor/harbor/blob/master/docs/configure_https.md</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out ca.key 4096</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line"> -subj &quot;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;SH&#x2F;L&#x3D;BS&#x2F;O&#x3D;GR&#x2F;OU&#x3D;MaxBill&#x2F;CN&#x3D;registry.maxbill.com&quot; \</span><br><span class="line"> -key ca.key \</span><br><span class="line"> -out ca.crt</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/c475b29e085512cd55ef76a083e3343fb03.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/c475b29e085512cd55ef76a083e3343fb03.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>openssl genrsa -out registry.maxbill.com.key 4096</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out registry.maxbill.com.key 4096</span><br><span class="line"></span><br><span class="line">openssl req -sha512 -new \</span><br><span class="line"> -subj &quot;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;SH&#x2F;L&#x3D;BS&#x2F;O&#x3D;GR&#x2F;OU&#x3D;MaxBill&#x2F;CN&#x3D;registry.maxbill.com&quot; \</span><br><span class="line"> -key registry.maxbill.com.key \</span><br><span class="line"> -out registry.maxbill.com.csr</span><br><span class="line"></span><br><span class="line">cat &gt; v3.ext &lt;&lt;-EOF</span><br><span class="line">authorityKeyIdentifier&#x3D;keyid,issuer</span><br><span class="line">basicConstraints&#x3D;CA:FALSE</span><br><span class="line">keyUsage &#x3D; digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span><br><span class="line">extendedKeyUsage &#x3D; serverAuth</span><br><span class="line">subjectAltName &#x3D; @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line">DNS.1&#x3D;registry.maxbill.com</span><br><span class="line">DNS.2&#x3D;192.168.100.101</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">openssl x509 -req -sha512 -days 3650 \</span><br><span class="line"> -extfile v3.ext \</span><br><span class="line"> -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line"> -in registry.maxbill.com.csr \</span><br><span class="line"> -out registry.maxbill.com.crt</span><br></pre></td></tr></table></figure></div><p><a href="https://oscimg.oschina.net/oscnet/4df70d896867ae41f2d8ae7bbd8d42d8980.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/4df70d896867ae41f2d8ae7bbd8d42d8980.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="修改harbor配置文件"><a href="#修改harbor配置文件" class="headerlink" title="修改harbor配置文件"></a>修改harbor配置文件</h3><p>vi harbor.yml 具体配置如下：<br>修改hostname: registry.maxbill.com<br>放开https配置：<br>https:<br>port: 443<br>certificate: /work/harbor/cert/registry.maxbill.com.crt<br>private_key: /work/harbor/cert/registry.maxbill.com.key<br>修改harbor_admin_password管理密码：MaxBill2019<br><a href="https://oscimg.oschina.net/oscnet/3ad21e64f0f7d7b0791abc2a186848230a4.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/3ad21e64f0f7d7b0791abc2a186848230a4.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="执行安装准备"><a href="#执行安装准备" class="headerlink" title="执行安装准备"></a>执行安装准备</h3><p>在harbor目录下执行 ./prepare<br><a href="https://oscimg.oschina.net/oscnet/e0161a53fa72198c0c46a1fd50232c9a92d.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/e0161a53fa72198c0c46a1fd50232c9a92d.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="开始安装操作"><a href="#开始安装操作" class="headerlink" title="开始安装操作"></a>开始安装操作</h3><p>在harbor 目录执行 ./install.sh<br><a href="https://oscimg.oschina.net/oscnet/a1a40b3204c2b10c6d722f863c6d235d579.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/a1a40b3204c2b10c6d722f863c6d235d579.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>等待安装程序打印如下日志，说明安装完成：<br><a href="https://oscimg.oschina.net/oscnet/8f16486438fa1976f719d922bef849b5614.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/8f16486438fa1976f719d922bef849b5614.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h2 id="安装验证"><a href="#安装验证" class="headerlink" title="安装验证"></a><strong>安装验证</strong></h2><p>在docker中看下启动的容器：<br>docker ps<br><a href="https://oscimg.oschina.net/oscnet/e5c075cc3ec9b645cfba11173c380fd93f1.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/e5c075cc3ec9b645cfba11173c380fd93f1.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>在浏览器中<a href="https://192.168.100.101或者https://registry.maxbill.com访问：" target="_blank" rel="noopener">https://192.168.100.101或者https://registry.maxbill.com访问：</a><br><a href="https://oscimg.oschina.net/oscnet/912129c4bfce37a9235241d9066d5c6c87a.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/912129c4bfce37a9235241d9066d5c6c87a.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>使用上面配置的账户登录：admin/MaxBill2019<br><a href="https://oscimg.oschina.net/oscnet/7daa22ce1ca5f84c62ff3e026133cd0b0bd.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/7daa22ce1ca5f84c62ff3e026133cd0b0bd.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      K8S(02)模拟生产环境搭建高可用集群之Docker私服
    
    </summary>
    
    
      <category term="开发运维" scheme="https://www.maxbill.cn/kinds/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="K8S" scheme="https://www.maxbill.cn/marks/K8S/"/>
    
      <category term="Kubernetes" scheme="https://www.maxbill.cn/marks/Kubernetes/"/>
    
      <category term="Docker" scheme="https://www.maxbill.cn/marks/Docker/"/>
    
      <category term="容器化" scheme="https://www.maxbill.cn/marks/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
      <category term="Harbor" scheme="https://www.maxbill.cn/marks/Harbor/"/>
    
      <category term="容器编排" scheme="https://www.maxbill.cn/marks/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/"/>
    
  </entry>
  
  <entry>
    <title>K8S(01)模拟生产环境搭建高可用集群之环境规划和基础准备</title>
    <link href="https://www.maxbill.cn/1686052618.html"/>
    <id>https://www.maxbill.cn/1686052618.html</id>
    <published>2019-10-27T06:42:03.000Z</published>
    <updated>2020-02-15T08:25:16.924Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>在微服务盛行的今天，大大小小的公司都在实践自己的微服务架构。并且近年来又兴起了以istio为代表的Service Mesh技术体系，专注为服务之间的网络调用、限流、熔断和监控等，解耦了微服务业务。随着微服务业务增加，那么使用传统的管理和部署方式显然成本很高，而且对于开发人员的专业素质有很高要。于是后面出现了容器化技术，将微服务结合自动化发布技术部署在docker容器中。但是随着业务不断增长，越来越多的容器很难管理，于是出现了容器编排技术，目前占据份额最多的当属google开源的kubernetes项目。从本文开始将会从0开始模拟搭建一个高可用的kubernetes集群，由于生产环境机器一般不允许访问外部网络，因此我们这个系列的实践都是在断网下使用二进制部署。</p><h2 id="模拟环境机器规划"><a href="#模拟环境机器规划" class="headerlink" title="模拟环境机器规划"></a><strong>模拟环境机器规划</strong></h2><p><a href="https://oscimg.oschina.net/oscnet/7c4df5a8f7b585c3e72ea218732388809b6.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/7c4df5a8f7b585c3e72ea218732388809b6.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h2 id="集群环境说明"><a href="#集群环境说明" class="headerlink" title="集群环境说明"></a><strong>集群环境说明</strong></h2><p>操作系统：CentOS7.7<br>Kubernetes版本：1.16.2<br>Docker版本：19.03</p><h2 id="集群主控和工作节点基础准备"><a href="#集群主控和工作节点基础准备" class="headerlink" title="集群主控和工作节点基础准备"></a><strong>集群主控和工作节点基础准备</strong></h2><h3 id="配置hosts文件"><a href="#配置hosts文件" class="headerlink" title="配置hosts文件"></a>配置hosts文件</h3><p>sudo cat &gt;&gt; /etc/hosts&lt;&lt;EOF<br>192.168.100.111 kube_cluster_master01<br>192.168.100.112 kube_cluster_master02<br>192.168.100.113 kube_cluster_master03<br>192.168.100.114 kube_cluster_minion01<br>192.168.100.115 kube_cluster_minion02<br>192.168.100.116 kube_cluster_minion03<br>192.168.100.117 kube_cluster_minion04<br>192.168.100.118 kube_cluster_minion05<br>EOF<br><a href="https://oscimg.oschina.net/oscnet/d7ba831bd3139007e63490aa7a1592ce2cd.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/d7ba831bd3139007e63490aa7a1592ce2cd.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="修改hostname文件"><a href="#修改hostname文件" class="headerlink" title="修改hostname文件"></a>修改hostname文件</h3><p>sudo hostnamectl set-hostname<newhostname><br><a href="https://oscimg.oschina.net/oscnet/a0a34fd97eaed7c42b1ef5433a9f77ed925.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/a0a34fd97eaed7c42b1ef5433a9f77ed925.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>修改完成logout或者重启启动就可看到修改结果</newhostname></p><h3 id="关闭系统防火墙"><a href="#关闭系统防火墙" class="headerlink" title="关闭系统防火墙"></a>关闭系统防火墙</h3><p>sudo systemctl stop firewalld &amp;&amp; systemctl disable firewalld<br><a href="https://oscimg.oschina.net/oscnet/6d66838d89bd0bd8ba170d01be7ec41bea7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/6d66838d89bd0bd8ba170d01be7ec41bea7.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="禁用swap内存交换"><a href="#禁用swap内存交换" class="headerlink" title="禁用swap内存交换"></a>禁用swap内存交换</h3><p>sudo swapoff -a &amp;&amp; sudo echo “swapoff -a” &gt;&gt;/etc/rc.d/rc.local &amp;&amp; sudo chmod +x /etc/rc.d/rc.local<br><a href="https://oscimg.oschina.net/oscnet/3ae23d7eccce6bb0db3bffbef87436daa68.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/3ae23d7eccce6bb0db3bffbef87436daa68.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="关闭系统selinux"><a href="#关闭系统selinux" class="headerlink" title="关闭系统selinux"></a>关闭系统selinux</h3><p>sudo setenforce 0<br>sudo sed -i ‘s/SELINUX=enforcing/SELINUX=disabled/g’ /etc/sysconfig/selinux<br>sudo sed -i ‘s/SELINUX=enforcing/SELINUX=disabled/g’ /etc/selinux/config<br><a href="https://oscimg.oschina.net/oscnet/eea01fb3c11d0cf96caaa70632394b0725d.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/eea01fb3c11d0cf96caaa70632394b0725d.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="修改系统内核参数"><a href="#修改系统内核参数" class="headerlink" title="修改系统内核参数"></a>修改系统内核参数</h3><p>sudo cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF<br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.ipv4.ip_forward = 1<br>net.ipv4.ip_local_port_range = 10000 65000<br>fs.file-max = 2000000<br>EOF<br>sudo sysctl –system<br><a href="https://oscimg.oschina.net/oscnet/0120b8356b4dbfee2dd6709ffda2fb0769d.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/0120b8356b4dbfee2dd6709ffda2fb0769d.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="校对系统时间"><a href="#校对系统时间" class="headerlink" title="校对系统时间"></a>校对系统时间</h3><p>搭建内网时间校正服务器，本文将时间服务器部署于192.168.100.101上，搭建服务步骤：<br>下载ntp-dev-4.3.99.tar.gz二进制包，解压：tar -zxvf ntp-dev-4.3.99.tar.gz<br>进入解压目录执行 ./configure<br>然后执行编译安装 make &amp;&amp; make install<br>sudo vi /etc/ntp.conf 修改配置文件，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># For more information about this file, see the man pages</span><br><span class="line"># ntp.conf(5), ntp_acc(5), ntp_auth(5), ntp_clock(5), ntp_misc(5), ntp_mon(5).</span><br><span class="line"></span><br><span class="line">driftfile &#x2F;var&#x2F;lib&#x2F;ntp&#x2F;drift</span><br><span class="line">restrict default nomodify</span><br><span class="line"></span><br><span class="line">restrict 127.0.0.1</span><br><span class="line">restrict ::1</span><br><span class="line">restrict 192.168.100.0 mask 255.255.254.0 nomodify</span><br><span class="line"></span><br><span class="line">server ntp1.aliyun.com</span><br><span class="line">server ntp2.aliyun.com</span><br><span class="line">server ntp3.aliyun.com</span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 8</span><br><span class="line"></span><br><span class="line">logfile &#x2F;var&#x2F;lib&#x2F;ntp&#x2F;ntp.log</span><br><span class="line">disable monitor</span><br></pre></td></tr></table></figure></div><p>mkdir /var/lib/ntp<br>touch /var/lib/ntp/ntp.log<br>sudo vi /usr/lib/systemd/system/ntpd.service 如下：编写ntp服务配置文件，如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;ntpd</span><br><span class="line">After&#x3D;syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;forking</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;ntpd -c &#x2F;etc&#x2F;ntpd.conf -p &#x2F;var&#x2F;run&#x2F;ntpd.pid -g</span><br><span class="line">PrivateTmp&#x3D;true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></div><p>使用iptables -F暂停防火墙，然后启动ntp服务systemctl enable ntpd &amp;&amp; systemctl start ntpd<br>集群中的机器将101服务器上的/usr/local/bin/ntpdate文件拷贝到自己对应的目录下<br>集群中的机器都使用ntpdate -d 192.168.100.101同步时间，然后将同步的系统时间写入biso，如下：<br><a href="https://oscimg.oschina.net/oscnet/07526226156ae0df25f521f093bd08bef94.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/07526226156ae0df25f521f093bd08bef94.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>其他方案：使用终端同时给个机器设置时间：date -s “2019-11-03 22:18:00” （修改成当期时间），使用clock -w把系统时间写入CMOS，使用hwclock -w将系统时间写入BISO</p><h2 id="集群搭建所需安装包"><a href="#集群搭建所需安装包" class="headerlink" title="集群搭建所需安装包"></a><strong>集群搭建所需安装包</strong></h2><p>ntp：<a href="http://www.ntp.org/downloads.html" target="_blank" rel="noopener">http://www.ntp.org/downloads.html</a><br>kubernetes：<a href="https://github.com/kubernetes/kubernetes/releases" target="_blank" rel="noopener">https://github.com/kubernetes/kubernetes/releases</a><br>docker：<a href="https://download.docker.com" target="_blank" rel="noopener">https://download.docker.com</a><br>docker-compose：<a href="https://github.com/docker/compose/releases" target="_blank" rel="noopener">https://github.com/docker/compose/releases</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      K8S(01)模拟生产环境搭建高可用集群之环境规划和基础准备
    
    </summary>
    
    
      <category term="开发运维" scheme="https://www.maxbill.cn/kinds/%E5%BC%80%E5%8F%91%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="高可用" scheme="https://www.maxbill.cn/marks/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
      <category term="K8S" scheme="https://www.maxbill.cn/marks/K8S/"/>
    
      <category term="Kubernetes" scheme="https://www.maxbill.cn/marks/Kubernetes/"/>
    
      <category term="Docker" scheme="https://www.maxbill.cn/marks/Docker/"/>
    
      <category term="Docker-Compose" scheme="https://www.maxbill.cn/marks/Docker-Compose/"/>
    
      <category term="NTP" scheme="https://www.maxbill.cn/marks/NTP/"/>
    
      <category term="容器化" scheme="https://www.maxbill.cn/marks/%E5%AE%B9%E5%99%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java深究之String、StringBuffer、StringBuilder的区别</title>
    <link href="https://www.maxbill.cn/2840479785.html"/>
    <id>https://www.maxbill.cn/2840479785.html</id>
    <published>2018-07-02T02:12:49.000Z</published>
    <updated>2020-02-15T08:28:17.634Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>在Java学习中，String、StringBuffer、StringBuilder三者是很重要的，在编写代码中经常使用到他们，那么深入的了解他们的异同是非常重要的，接下里我们详细剖析下这三个的异同之处</p><p><strong>首先总结下这三者的区别：</strong></p><p><strong>基本区别</strong><br>String的对象不可变，StringBuffer和StringBuilder的对象是可变的</p><p><strong>性能区别</strong><br>三者中StringBuilder执行速度最佳，StringBuffer次之，String的执行速度最慢（String为字符串常量，而StringBuilder和StringBuffer均为字符串变量，String对象一旦创建后该对象是不可更改的，后两者的对象是变量是可以更改的）</p><p><strong>安全区别</strong><br>String、StringBuffer是线程安全的，StringBuilder是线程不安全的（所以如果程序是单线程的使用StringBuilder效率高，如果是多线程使用StringBuffer或者String）</p><p><strong>其次总结下这三者的相同：</strong><br>1.三者在java中都是用来处理字符串的<br>2.三个类都被final修饰，因此都是不可继承的<br>3.StringBuilder与StringBuffer有公共父类AbstractStringBuilder(抽象类)</p><p><strong>接下来我们从源码和案例深入分析这三者：</strong></p><h2 id="String"><a href="#String" class="headerlink" title="String"></a><strong>String</strong></h2><p><a href="https://oscimg.oschina.net/oscnet/58422cbfc4738f98ce1c69c26c5889b7016.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/58422cbfc4738f98ce1c69c26c5889b7016.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>String常用方法：<br>1.length（） 获取字符串长度<br>2.replace（） 替换字符串中某些字符<br>3.equals（） 比较两个字符对象内容是否相同<br>4.substring（） 截取一个新的字符串，它是此字符串中的子串<br>5.trim（） 将字符串开头的空白（空格）和尾部的空白去掉<br>6.indexOf（） 求某个字符在字符串中的位置<br>7.charAt（） 求一个字符串中某个位置的值<br>8.toLowerCase（） 将字符串中所有的大写改变成小写<br>9.toUpperCase（） 将字符串中所有的小写改变为大写<br><a href="https://oscimg.oschina.net/oscnet/ed47594e4e2c11e5517952bda15a13663c9.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/ed47594e4e2c11e5517952bda15a13663c9.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><p>注意：<br>1.String是final类型，不可被继承；<br>2.String的对象不可变<br><a href="https://oscimg.oschina.net/oscnet/098a46d4ac86b016e570c1d57611c0070b2.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/098a46d4ac86b016e570c1d57611c0070b2.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>从上面这个案例我们发现a对象的内容被改变了，不是说不能改变么，这里我们不能被表面迷惑，我们再看下面的程序<br><a href="https://oscimg.oschina.net/oscnet/451a0f2e887124165318d0910715e875693.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/451a0f2e887124165318d0910715e875693.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>我们发现字符串a被重新赋值后其实已经不是它自己了，从hashCode值可以看出。当a字符串创建赋值maxbill，然后重新赋值时又会创建一个a对象值为：maxbill1993，此时844527467是一已经在等待GC回收了，我们看到的实际上是-1438782163对象。所以我们在程序中对字符串使用+连接时，并不是把内容动态的改变进去，而是每次都会创建一个新的String对象去放新的字符内容，原来的对象会等着GC回收，所以这也是String为啥相比其他两者执行慢的原因了。</p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a><strong>StringBuffer</strong></h2><p><a href="https://oscimg.oschina.net/oscnet/76a088b2c78b2725f249d01aaac64a3ab7e.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/76a088b2c78b2725f249d01aaac64a3ab7e.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/348c50773408ec456af5f6d0fffd6e286e9.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/348c50773408ec456af5f6d0fffd6e286e9.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>从StringBuffer类的源码可以看出，其方法都被同步锁synchronized修饰，因此是线程安全的，因此在多线程编程中操作字符串是推荐使用为什么说StringBuffer比String的执行速度要高，前面说了String的原理，是导致其慢的原因，StringBuffer相比快是因为使用了字符串变量，是可以动态改变的，不必像String一样总是去创建对象赋值新内容，我们</p><p>看下面的案例就明白了<br><a href="https://oscimg.oschina.net/oscnet/0239d47ff547c2f24599d5f0eaf1641803c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/0239d47ff547c2f24599d5f0eaf1641803c.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>由上面的案例可以看出StringBuffer在修改字符串内容时，不会创建新的对象，因此它比String类效率更高<br>StringBuffer常用方法：<br>1.length（） 获取StringBuffer字符长度<br>2.append（） 向StringBuffer增加字符<br>3.delete（） 删除StringBuffer中的字符<br>4.replace（） 替换StringBuffer中的字符<br>5.insert（） 向StringBuffer中插入字符<br>6.toString （） 把StringBuffer转成字符串<br>StringBuffer的append方法源码解读：<br><a href="https://oscimg.oschina.net/oscnet/54c519f69db61c95b2c91f73bd06a9880f3.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/54c519f69db61c95b2c91f73bd06a9880f3.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/a248ac03f7a778bf2fc87cbf17d2021e58e.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/a248ac03f7a778bf2fc87cbf17d2021e58e.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>调用了父类的append方法，我们看下父类append的源码<br><a href="https://oscimg.oschina.net/oscnet/7b91dba0e4a898112cd402ede6671ec7cd7.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/7b91dba0e4a898112cd402ede6671ec7cd7.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/1ce1a2de74d9f9e9a0b5a57c76a4114aa1b.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/1ce1a2de74d9f9e9a0b5a57c76a4114aa1b.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/aee8353c3460f5f9b529e88d0dfb3ba8e03.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/aee8353c3460f5f9b529e88d0dfb3ba8e03.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/6a6e9e77a96a39a33465c7d01135a96b56c.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/6a6e9e77a96a39a33465c7d01135a96b56c.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/5e1065447b0410be1883b7cc6cc1b530801.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/5e1065447b0410be1883b7cc6cc1b530801.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://oscimg.oschina.net/oscnet/613de619050047539c30999612b6e4bc08e.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/613de619050047539c30999612b6e4bc08e.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>基本原理：使用append()方法在字符串后面追加东西的时候，如果长度超过了该字符串存储空间大小了就需要进行扩容，构建新的存储空间更大的字符串，将旧的数据的复制过去<br>详细原理：char value[]用来存储数据，int count用来记录字符长度，StringBuffer初始16个字符容量 ，先记录下传进来字符串的长度，然后使用ensureCapacityInternal函数判是否需要扩容，如果容量不够则使用newCapacity进行扩容，新容量扩为原来2倍+2，存储容量够了使用getChars函数复制数据，最后将count更新。</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a><strong>StringBuilder</strong></h2><p><a href="https://oscimg.oschina.net/oscnet/cf4cab5758d8ef24ed2c20eff57a4cb3a95.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/cf4cab5758d8ef24ed2c20eff57a4cb3a95.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>StringBuilder和StringBuffer的使用方法和原理基本一致的，唯一的区别就是StringBuilder是线程不安全的，执行效率要比StringBuffer高，因此当时单线程的时候推荐使用线程不安全的StringBuilder效率更高一些，如果是多线程推荐使用StringBuffer来保证线程安全</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Java深究之String、StringBuffer、StringBuilder的区别
    
    </summary>
    
    
      <category term="代码深究" scheme="https://www.maxbill.cn/kinds/%E4%BB%A3%E7%A0%81%E6%B7%B1%E7%A9%B6/"/>
    
    
      <category term="Java" scheme="https://www.maxbill.cn/marks/Java/"/>
    
      <category term="String" scheme="https://www.maxbill.cn/marks/String/"/>
    
      <category term="StringBuffer" scheme="https://www.maxbill.cn/marks/StringBuffer/"/>
    
      <category term="StringBuilder" scheme="https://www.maxbill.cn/marks/StringBuilder/"/>
    
  </entry>
  
  <entry>
    <title>Java深究之final、finally、finalize三者的区别</title>
    <link href="https://www.maxbill.cn/4599877800.html"/>
    <id>https://www.maxbill.cn/4599877800.html</id>
    <published>2018-06-29T08:22:37.000Z</published>
    <updated>2020-02-15T08:27:00.858Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>在java中final、finally、finalize三者在写法上很相近，但是实际含义和作用却是相差甚远。本文主要是来深层的研究下这三者的用法以及之间的区别</p><h2 id="final"><a href="#final" class="headerlink" title="final"></a><strong>final</strong></h2><p>属性：java中的关键字，修饰符<br>作用：用于修饰类、成员方法、变量（成员变量、局部变量）<br>用法：如果类被声明为final，那么该类就不能再派生出新的子类，也不能当作父类被子类继承。一个类不能同时被声明为抽象类（absrtact修饰）和final的类；如果成员方法被声明final，那么该方法只能使用，不能重载；如果变量（成员变量、局部变量）被声明为final，那么必须在声明时给定初始化的值，在后面的引用中只能读取，不可修改值。</p><p>注意：<br>1.类被声明为final，类中的所有成员方法都会被隐式地指定为final方法；<br>2.final成员变量必须在声明的时候初始化或者在构造器中初始化，否则编译时会报错；<br>3.在匿名类（内部类）中所有变量都必须是final变量；<br>4.在接口中声明的所有变量本身是final的；<br>5.如果基本数据类型的变量被声明为final，则其数值一旦在初始化之后便不能更改<br><a href="https://oscimg.oschina.net/oscnet/135f772d6d484d11d8f0da62d63ac441197.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/135f772d6d484d11d8f0da62d63ac441197.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>如果引用类型的变量被声明为final，则在对其初始化之后便不能再让其指向另一个对象，但该对象的内容是可以改变的<br><a href="https://oscimg.oschina.net/oscnet/50b42e4445d80f1b53e7b36ec4284b48c78.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/50b42e4445d80f1b53e7b36ec4284b48c78.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>6.当final变量是基本数据类型以及String类型时，在编译期间是知道它的确切值，那么编译器会把它当做编译期常量，在用到该final变量的地方，相当于直接访问的这个常量<br><a href="https://oscimg.oschina.net/oscnet/099ea033fb54b237e7377305d4858932fa3.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/099ea033fb54b237e7377305d4858932fa3.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>只有在编译期间能确定final变量值的时候才会被当编译常量，以下是编译时不知道确定值的<br><a href="https://oscimg.oschina.net/oscnet/642942af101c9a8c8cdc9619a26edb47ca0.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/642942af101c9a8c8cdc9619a26edb47ca0.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a><strong>finally</strong></h2><p>属性：异常处理时的finally块<br>作用: try { 正常逻辑 } catch(Exception e) { 异常逻辑 } finally{ 一定会被执行的逻辑 }<br>用法：异常处理（try catch）时finally块无论有没有异常发生，finally块的代码一定会被执行，所以在程序中有需要无论发生什么都必须执行的代码，就可以放在finally块中，最常见流关闭等释放资源的操作<br>注意：1.finally代码块无论有没有异常发生，finally块的代码一定会被执行； 2.即使try里包含continue、break、return语句，try块结束后，finally块也会执行； 3.finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值</p><h2 id="finalize"><a href="#finalize" class="headerlink" title="finalize"></a><strong>finalize</strong></h2><p>属性：方法名，Object中的方法<br>作用：finalize()方法是在垃圾收集器删除对象之前对这个对象调用<br>用法：Java中使用finalize()方法在垃圾收集器将对象从内存中清除出去之前（GC之前）做必要的清理内存的工作。这个方法是在垃圾收集器确认一个对象没有被引用时对这个对象调用的。它在Object类中定义的，所有的类都继承了它。子类覆盖finalize()方法已整理系统资源或者执行其他清理工作。finalize()方法是在垃圾收集器删除对象之前对这个对象调用的<br>注意：<br>1.垃圾回收器要回收对象的时候，首先要调用这个类的finalize方法<br><a href="https://oscimg.oschina.net/oscnet/01ba97e2a7db45797bca01967f2dc1093ac.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/01ba97e2a7db45797bca01967f2dc1093ac.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>2.程序退出时为每个对象调用一次finalize方法<br>3.当某个对象被系统收集为无用信息的时候,finalize()将被自动调用,但是jvm不保证finalize()一定被调用<br>4.finalize()方法被关键字protected修饰是防止在该类之外定义的代码访问finalize()标识符<br><a href="https://oscimg.oschina.net/oscnet/8bd8c55421159839091fc1a8c23602762ea.jpg" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://oscimg.oschina.net/oscnet/8bd8c55421159839091fc1a8c23602762ea.jpg" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>5.finalize()方法的主要用途是释放一些其他做法开辟的内存空间，以及做一些清理工作<br>6.一旦垃圾回收器GC准备好释放对象占用的存储空间，首先会去调用finalize()方法进行一些必要的清理工作。只有到下一次再进行垃圾回收动作的时候，才会真正释放这个对象所占用的内存空间<br>7.finalize()现在已经不推荐使用了，java9已经设置为deprecated了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Java深究之final、finally、finalize三者的区别
    
    </summary>
    
    
      <category term="代码深究" scheme="https://www.maxbill.cn/kinds/%E4%BB%A3%E7%A0%81%E6%B7%B1%E7%A9%B6/"/>
    
    
      <category term="Java" scheme="https://www.maxbill.cn/marks/Java/"/>
    
      <category term="final" scheme="https://www.maxbill.cn/marks/final/"/>
    
      <category term="finally" scheme="https://www.maxbill.cn/marks/finally/"/>
    
      <category term="finalize" scheme="https://www.maxbill.cn/marks/finalize/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop(02)-使用JavaApi对HDFS进行基本操作</title>
    <link href="https://www.maxbill.cn/3224700853.html"/>
    <id>https://www.maxbill.cn/3224700853.html</id>
    <published>2017-11-16T06:55:38.000Z</published>
    <updated>2020-02-15T08:31:18.378Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>本文源码码云地址：<a href="https://gitee.com/MaxBill/Hadoop" target="_blank" rel="noopener">https://gitee.com/MaxBill/Hadoop</a></p><p>在上篇《<a href="https://www.maxbill.cn/3609085320.html">Hadoop(01)-Windows平台下Hadoop环境搭建</a>》中，实践了在windows平台下使用搭建hadoop开发环境，同时搭建完毕在基于命令行的形式对HDFS进行了基本的操作，本文我们会在搭建的hadoop的基础平台上使用JAVA API来对HDFS进行简单的操作。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>1.windows下hadoop开发环境：参见《<a href="https://www.maxbill.cn/3609085320.html">Hadoop(01)-Windows平台下Hadoop环境搭建</a>》<br>2.IDEA开发编辑器</p><h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><h3 id="建一个SpringBoot项目"><a href="#建一个SpringBoot项目" class="headerlink" title="建一个SpringBoot项目"></a>建一个SpringBoot项目</h3><p>使用IDEA新建一个SpringBoot项目，如下是我新建的项目结构：<br><a href="https://static.oschina.net/uploads/space/2017/1116/125251_dSJF_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/125251_dSJF_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="添加操作HDFS的依赖包"><a href="#添加操作HDFS的依赖包" class="headerlink" title="添加操作HDFS的依赖包"></a>添加操作HDFS的依赖包</h3><p>在刚建的SpringBoot项目的pom.xml文件里添加hadoop的依赖包hadoop-common, hadoop-client, hadoop-hdfs：<br><dependency><br><groupid>org.apache.hadoop</groupid><br><artifactid>hadoop-common</artifactid><br><version>2.8.2</version><br></dependency><br><dependency><br><groupid>org.apache.hadoop</groupid><br><artifactid>hadoop-hdfs</artifactid><br><version>2.8.2</version><br></dependency><br><dependency><br><groupid>org.apache.hadoop</groupid><br><artifactid>hadoop-client</artifactid><br><version>2.8.2</version><br></dependency></p><h3 id="启动hadoop服务"><a href="#启动hadoop服务" class="headerlink" title="启动hadoop服务"></a>启动hadoop服务</h3><p>进入hadoop安装目录下的sbin中，执行脚本start-dfs.cmd<br><a href="https://static.oschina.net/uploads/space/2017/1116/113709_wcFP_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/113709_wcFP_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://static.oschina.net/uploads/space/2017/1116/113758_VVEq_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/113758_VVEq_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>这时hadoop服务已经成功启动。</p><h2 id="开始编码"><a href="#开始编码" class="headerlink" title="开始编码"></a>开始编码</h2><p>对HDFS操作设计以下几个主要的类：<br>Configuration：封装了客户端或者服务器的配置信息<br>FileSystem：此类的对象是一个文件系统对象，可以用该对象的一些方法来对文件进行操作通过FileSystem的静态方法get获得该对象，例：FileSystem hdfs = FileSystem.get(conf);<br>FSDataInputStream：这是HDFS中的输入流，通过由FileSystem的open方法获取<br>FSDataOutputStream：这是HDFS中的输出流，通过由FileSystem的create方法获取</p><h3 id="获取hadoop配置信息"><a href="#获取hadoop配置信息" class="headerlink" title="获取hadoop配置信息"></a>获取hadoop配置信息</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/130355_W3Yn_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/130355_W3Yn_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="获取文件系统对象"><a href="#获取文件系统对象" class="headerlink" title="获取文件系统对象"></a>获取文件系统对象</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/130413_lQUL_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/130413_lQUL_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>客户端去操作HDFS时，是有一个用户身份的,默认情况下，HDFS客户端API会从JVM中获取一个参数来作为自己的用户身份：DHADOOP_USER_NAME=hadoop<br>FileSystem hdfs = FileSystem.get(getHdfsConfig()); //默认获取<br>也可以在构造客户端fs对象时，通过参数传递进去<br>FileSystem hdfs = FileSystem.get(new URI(rootPath), getHdfsConfig(), “你的用户名”);</p><h3 id="创建文件夹操作"><a href="#创建文件夹操作" class="headerlink" title="创建文件夹操作"></a>创建文件夹操作</h3><p>先看下我们使用的用户下的目录（注：本文使用Administrator用户）：<br><a href="https://static.oschina.net/uploads/space/2017/1116/134602_ORtB_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/134602_ORtB_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>可以看到该用户下为空目录，然后编写程序运行测试：<br><a href="https://static.oschina.net/uploads/space/2017/1116/131704_uRDl_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/131704_uRDl_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a>)<a href="https://static.oschina.net/uploads/space/2017/1116/131728_Gg0N_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/131728_Gg0N_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>此时查看maxbill目录<br><a href="https://static.oschina.net/uploads/space/2017/1116/134516_XhDO_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/134516_XhDO_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="创建文件操作"><a href="#创建文件操作" class="headerlink" title="创建文件操作"></a>创建文件操作</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/134952_ISM9_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/134952_ISM9_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>运行测试创建文件后查看目录：（在刚创建的demo目录创建maxbill.txt文件，并写入hello world）<br><a href="https://static.oschina.net/uploads/space/2017/1116/135646_Sb8m_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/135646_Sb8m_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="读取文件内容操作"><a href="#读取文件内容操作" class="headerlink" title="读取文件内容操作"></a>读取文件内容操作</h3><p>读取刚才创建的maxbill.txt文件<br><a href="https://static.oschina.net/uploads/space/2017/1116/135943_1MKF_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/135943_1MKF_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="读取目录信息"><a href="#读取目录信息" class="headerlink" title="读取目录信息"></a>读取目录信息</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/141755_BLMh_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/141755_BLMh_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a>)<a href="https://static.oschina.net/uploads/space/2017/1116/141923_kBNg_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/141923_kBNg_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>读出那会我们创建的demo目录的详细信息：<br><a href="https://static.oschina.net/uploads/space/2017/1116/142012_CFiC_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/142012_CFiC_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="读取文件列表"><a href="#读取文件列表" class="headerlink" title="读取文件列表"></a>读取文件列表</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/142122_hP4F_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/142122_hP4F_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>读出那会我们创建的demo目录下的文件：<br><a href="https://static.oschina.net/uploads/space/2017/1116/142226_Hj9z_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/142226_Hj9z_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://static.oschina.net/uploads/space/2017/1116/142320_Sinq_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/142320_Sinq_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="重命名文件"><a href="#重命名文件" class="headerlink" title="重命名文件"></a>重命名文件</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/142557_lME3_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/142557_lME3_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://static.oschina.net/uploads/space/2017/1116/142730_FewD_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/142730_FewD_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>运行重命名程序后，查看文件已经被重命名：<br><a href="https://static.oschina.net/uploads/space/2017/1116/142828_7veY_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/142828_7veY_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/143213_9zeH_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/143213_9zeH_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://static.oschina.net/uploads/space/2017/1116/143125_U9qx_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/143125_U9qx_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>运行删除程序后，查看文件已经被删除：<br><a href="https://static.oschina.net/uploads/space/2017/1116/143246_0LMU_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/143246_0LMU_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/144655_12fp_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/144655_12fp_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a>)<a href="https://static.oschina.net/uploads/space/2017/1116/144051_CY1X_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/144051_CY1X_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>运行上传程序后，查看文件已经被上传到指定目录：<br><a href="https://static.oschina.net/uploads/space/2017/1116/144222_JmCv_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/144222_JmCv_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p><a href="https://static.oschina.net/uploads/space/2017/1116/144712_RDgR_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/144712_RDgR_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>运行下载程序后，查看文件已经被下载到指定目录：<br><a href="https://static.oschina.net/uploads/space/2017/1116/145003_wjsy_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1116/145003_wjsy_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>下载后多出一个crc文件，还没注意是啥作用</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>通过使用java api操作hadoop的hdfs，给我的感觉是和阿里的对象存储类似的效果，hdfs可以用来架设公司的云盘等服务，也可作文件服务器使用，本文使用的单机操作，后面会使用集群来进行实践。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Hadoop(02)-使用JavaApi对HDFS进行基本操作
    
    </summary>
    
    
      <category term="学大数据" scheme="https://www.maxbill.cn/kinds/%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="分布式文件系统" scheme="https://www.maxbill.cn/marks/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Hadoop" scheme="https://www.maxbill.cn/marks/Hadoop/"/>
    
      <category term="HDFS" scheme="https://www.maxbill.cn/marks/HDFS/"/>
    
      <category term="大数据" scheme="https://www.maxbill.cn/marks/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop(01)-Windows平台下Hadoop环境搭建</title>
    <link href="https://www.maxbill.cn/3609085320.html"/>
    <id>https://www.maxbill.cn/3609085320.html</id>
    <published>2017-11-13T05:13:03.000Z</published>
    <updated>2020-02-15T08:29:34.513Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><!-- build time:Sat Feb 15 2020 16:42:53 GMT+0800 (GMT+08:00) --><p>hadoop是运行在linux系统下的一个由Apache基金会所开发的分布式系统基础架构。用户可以在不了解分布式底层细节的情况下，开发分布式程序，充分利用集群的威力进行高速运算和存储。今天我们要在windows环境下搭建hadoop的环境，Windows下运行Hadoop，通常有两种方式：一种是用VM方式安装一个Linux操作系统，这样基本可以实现全Linux环境的Hadoop运行；另一种是通过Cygwin模拟Linux环境。后者的好处是使用比较方便，安装过程也简单。今天我们使用第三种方式不需要虚拟机和cygwin依赖，相对简便很多。</p><h2 id="环境搭建准备"><a href="#环境搭建准备" class="headerlink" title="环境搭建准备"></a>环境搭建准备</h2><p>1.windows系统（win7及以上）<br>2.hadoop程序包（本文使用最新稳定版hadoop-2.8.2），下载地址：<br><a href="http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.2" target="_blank" rel="noopener">http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.8.2</a><br>3.下载hadoop在windows上需要的winutils支持和hadoop.dll依赖库，下载地址：<br><a href="https://github.com/steveloughran/winutils" target="_blank" rel="noopener">https://github.com/steveloughran/winutils</a> （注：选择自己对应的版本）</p><h2 id="开始搭建步骤"><a href="#开始搭建步骤" class="headerlink" title="开始搭建步骤"></a>开始搭建步骤</h2><h3 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h3><p>将刚才下载的hadoop-2.8.2程序包解压到windows的磁盘目录下（注：无空格目录，最好不要汉语）<br>然后配置hadoop的环境变量：新建HADOOP_HOME，定位到hadoop解压目录，如：<br><a href="https://static.oschina.net/uploads/space/2017/1113/110848_aXwv_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/110848_aXwv_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>D:\tool\bigdata\hadoop （注：我的目录，大家换成自己的目录）path环境变量中增加：<br>%HADOOP_HOME%\bin;<br><a href="https://static.oschina.net/uploads/space/2017/1113/104851_gHyc_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/104851_gHyc_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="下载安装JDK环境"><a href="#下载安装JDK环境" class="headerlink" title="下载安装JDK环境"></a>下载安装JDK环境</h3><p>jdk安装配置此处省略，我的其他地方已经提及，或者大家自己百度搭建</p><h3 id="配置Hadoop依赖库"><a href="#配置Hadoop依赖库" class="headerlink" title="配置Hadoop依赖库"></a>配置Hadoop依赖库</h3><p>将winutils.exe放到hadoop的bin目录下，将hadoop.dll放到C盘/windows/System目录下<br>注：如果出现依赖性异常问题可以将hadoop.dll放到C盘/windows/System32解决</p><h3 id="测试hadoop环境"><a href="#测试hadoop环境" class="headerlink" title="测试hadoop环境"></a>测试hadoop环境</h3><p>在hadoop的bin目录下按住shift右击选择在此处打开命令行，输入hadoop version命令查看信息：<br><a href="https://static.oschina.net/uploads/space/2017/1113/112152_SmJS_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/112152_SmJS_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="配置hadoop"><a href="#配置hadoop" class="headerlink" title="配置hadoop"></a>配置hadoop</h3><p>修改hadoop核心配置文件hadoop/etc/hadoop/core-site.xml<br><a href="https://static.oschina.net/uploads/space/2017/1113/112902_F0n5_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/112902_F0n5_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a>修改hdfs配置文件hadoop/etc/hadoop/hdfs-site.xml<br><a href="https://static.oschina.net/uploads/space/2017/1113/125413_Qwss_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/125413_Qwss_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>修改hdfs配置文件hadoop/etc/hadoop/mapred-site.xml<br><a href="https://static.oschina.net/uploads/space/2017/1113/121008_suB2_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/121008_suB2_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>修改hdfs配置文件hadoop/etc/hadoop/yarn-site.xml<br><a href="https://static.oschina.net/uploads/space/2017/1113/121116_paJp_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/121116_paJp_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a></p><h3 id="启动hadoop环境"><a href="#启动hadoop环境" class="headerlink" title="启动hadoop环境"></a>启动hadoop环境</h3><p>启动前先执行hdfs namenode -format格式化系统文件命令（注：hadoop/bin下执行）<br><a href="https://static.oschina.net/uploads/space/2017/1113/121545_gw8j_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/121545_gw8j_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://static.oschina.net/uploads/space/2017/1113/121644_9FFJ_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/121644_9FFJ_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>此时已进行完初始化系统第一步，接下来cd到hadoop/sbin目录下，按住shift右击选择在此处打开命<br>令行执行 start-dfs 命令启动hadoop<br><a href="https://static.oschina.net/uploads/space/2017/1113/122059_7GLR_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/122059_7GLR_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://static.oschina.net/uploads/space/2017/1113/122135_Jxed_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/122135_Jxed_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>查看控制台日志发现启动报出异常，没有启动成功：查看控制台错误时缺少库文件，好像忘记把hadoop.dll文件加到hadoop的bin目录下了，于是拷贝粘贴再次执行start-dfs命令<br><a href="https://static.oschina.net/uploads/space/2017/1113/124132_fdGp_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/124132_fdGp_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br><a href="https://static.oschina.net/uploads/space/2017/1113/124206_3wEO_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/124206_3wEO_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>此时成功启动，在浏览器地址栏输入<a href="http://127.0.0.1:50070/" target="_blank" rel="noopener">http://127.0.0.1:50070/</a><br><a href="https://static.oschina.net/uploads/space/2017/1113/124335_j5Qc_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/124335_j5Qc_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>此时说明hadoop在windows平台下已经成功搭建完成。</p><h2 id="Hadoop的简单使用"><a href="#Hadoop的简单使用" class="headerlink" title="Hadoop的简单使用"></a>Hadoop的简单使用</h2><h3 id="简单操作hdfs"><a href="#简单操作hdfs" class="headerlink" title="简单操作hdfs"></a>简单操作hdfs</h3><p>由于已经在环境变量中配置了hadoop/bin目录此时在命令行中直接就可使欢乐的使用hdfs的命令了<br>&lt;1&gt;.显示文件命令：hdfs dfs -ls<br>&lt;2&gt;.创建目录（文件夹）命令：hdfs dfs -mkdir &lt;目录&gt;<br>&lt;3&gt;.文件的输入命令：hdfs dfs -put &lt;源文件目录&gt; &lt;hdfs文件目录&gt;<br>&lt;4&gt;.文件内容显示命令：hdfs dfs -cat &lt;文件目录&gt;<br>&lt;5&gt;.删除文件命令：hdfs dfs -&lt;文件目录&gt;</p><h3 id="可视化hdfs资源"><a href="#可视化hdfs资源" class="headerlink" title="可视化hdfs资源"></a>可视化hdfs资源</h3><p>使用命令行操作可能会觉得不清晰，于是hadoop为我们提供了可视化操作：我们进入hadoop/sbin目录下输入start-yarn命令回车，然后访问<a href="http://127.0.0.1:8088" target="_blank" rel="noopener">http://127.0.0.1:8088</a>就可以可视化的查看资源以及进行节点管理的操作。<br><a href="https://static.oschina.net/uploads/space/2017/1113/131214_Dhmq_2846946.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://static.oschina.net/uploads/space/2017/1113/131214_Dhmq_2846946.png" src="https://cdn.maxbill.cn/blog/img/loading.gif" class="lazyload"></a><br>其他web管理界面地址：<br>| NameNode | <a href="http://127.0.0.1:50070/" target="_blank" rel="noopener">http://127.0.0.1:50070/</a> | 默认 HTTP 端口为 50070. |<br>| ResourceManager | <a href="http://127.0.0.1:8088/" target="_blank" rel="noopener">http://127.0.0.1:8088/</a> | 默认 HTTP端口为 8088 |<br>| MapReduce JobHistory Server | <a href="http://127.0.0.1:19888/" target="_blank" rel="noopener">http://127.0.0.1:19888/</a> | 默认 HTTP 端口为 19888 |</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      Hadoop(01)-Windows平台下Hadoop环境搭建
    
    </summary>
    
    
      <category term="学大数据" scheme="https://www.maxbill.cn/kinds/%E5%AD%A6%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="分布式文件系统" scheme="https://www.maxbill.cn/marks/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Hadoop" scheme="https://www.maxbill.cn/marks/Hadoop/"/>
    
      <category term="HDFS" scheme="https://www.maxbill.cn/marks/HDFS/"/>
    
      <category term="大数据" scheme="https://www.maxbill.cn/marks/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
</feed>
